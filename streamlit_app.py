import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import time
import re

# ==================== FUNCIONES DE VALIDACI√ìN PROGRESIVA ====================

def validate_step_1():
    """Valida que se haya seleccionado al menos una opci√≥n en prote√≠nas grasas"""
    selections = (
        st.session_state.get('huevos_embutidos', []) + 
        st.session_state.get('carnes_res_grasas', []) + 
        st.session_state.get('carnes_cerdo_grasas', []) + 
        st.session_state.get('carnes_pollo_grasas', []) + 
        st.session_state.get('organos_grasos', []) + 
        st.session_state.get('quesos_grasos', []) + 
        st.session_state.get('lacteos_enteros', []) + 
        st.session_state.get('pescados_grasos', []) + 
        st.session_state.get('mariscos_grasos', [])
    )
    return len(selections) > 0

def validate_step_2():
    """Valida que se haya seleccionado al menos una opci√≥n en prote√≠nas magras"""
    selections = (
        st.session_state.get('carnes_res_magras', []) + 
        st.session_state.get('carnes_cerdo_magras', []) + 
        st.session_state.get('carnes_pollo_magras', []) + 
        st.session_state.get('organos_magros', []) + 
        st.session_state.get('pescados_magros', []) + 
        st.session_state.get('mariscos_magros', []) + 
        st.session_state.get('quesos_magros', []) + 
        st.session_state.get('lacteos_light', []) + 
        st.session_state.get('huevos_embutidos_light', [])
    )
    return len(selections) > 0

def validate_step_3():
    """Valida que se haya seleccionado al menos una opci√≥n en grasas saludables"""
    selections = (
        st.session_state.get('grasas_naturales', []) + 
        st.session_state.get('frutos_secos_semillas', []) + 
        st.session_state.get('mantequillas_vegetales', [])
    )
    return len(selections) > 0

def validate_step_4():
    """Valida que se haya seleccionado al menos una opci√≥n en carbohidratos"""
    selections = (
        st.session_state.get('cereales_integrales', []) + 
        st.session_state.get('pastas', []) + 
        st.session_state.get('tortillas_panes', []) + 
        st.session_state.get('raices_tuberculos', []) + 
        st.session_state.get('leguminosas', [])
    )
    return len(selections) > 0

def validate_step_5():
    """Valida que se haya seleccionado al menos una opci√≥n en vegetales"""
    return len(st.session_state.get('vegetales_lista', [])) > 0

def validate_step_6():
    """Valida que se haya seleccionado al menos una opci√≥n en frutas"""
    return len(st.session_state.get('frutas_lista', [])) > 0

def validate_step_7():
    """Valida aceites de cocci√≥n - opcional"""
    return True  # Este paso es opcional

def validate_step_8():
    """Valida bebidas - opcional"""
    return True  # Este paso es opcional

def validate_step_9():
    """Valida que se haya seleccionado al menos una opci√≥n en alergias/intolerancias"""
    alergias_selections = st.session_state.get('alergias_alimentarias', [])
    intolerancias_selections = st.session_state.get('intolerancias_digestivas', [])
    
    # Al menos una selecci√≥n en alguno de los dos grupos (puede ser "Ninguna")
    return len(alergias_selections) > 0 or len(intolerancias_selections) > 0

def validate_step_10():
    """Valida que se haya seleccionado al menos una opci√≥n en antojos"""
    selections = (
        st.session_state.get('antojos_dulces', []) +
        st.session_state.get('antojos_salados', []) +
        st.session_state.get('antojos_comida_rapida', []) +
        st.session_state.get('antojos_bebidas', []) +
        st.session_state.get('antojos_picantes', [])
    )
    return len(selections) > 0

def validate_step_11():
    """Valida frecuencia de comidas - opcional"""
    return True  # Este paso es opcional

def validate_step_12():
    """Valida sugerencias de men√∫s - opcional"""
    return True  # Este paso es opcional

def get_step_validator(step_number):
    """Obtiene la funci√≥n de validaci√≥n para un paso espec√≠fico"""
    validators = {
        1: validate_step_1,
        2: validate_step_2, 
        3: validate_step_3,
        4: validate_step_4,
        5: validate_step_5,
        6: validate_step_6,
        7: validate_step_7,
        8: validate_step_8,
        9: validate_step_9,
        10: validate_step_10,
        11: validate_step_11,
        12: validate_step_12
    }
    return validators.get(step_number, lambda: True)

def advance_to_next_step():
    """Avanza al siguiente paso si la validaci√≥n es exitosa"""
    current_step = st.session_state.get('current_step', 1)
    validator = get_step_validator(current_step)
    
    if validator():
        # Marcar el paso actual como completado
        st.session_state.step_completed[current_step] = True
        # Avanzar al siguiente paso
        if current_step < 12:
            st.session_state.current_step = current_step + 1
            st.session_state.max_unlocked_step = max(st.session_state.max_unlocked_step, current_step + 1)
        return True
    else:
        # Mostrar mensaje de error profesional
        st.error("Para continuar, por favor selecciona al menos una opci√≥n en este grupo. Esto permitir√° generar una evaluaci√≥n nutricional personalizada y precisa.")
        return False

def go_to_previous_step():
    """Retrocede al paso anterior"""
    current_step = st.session_state.get('current_step', 1)
    if current_step > 1:
        st.session_state.current_step = current_step - 1

# ==================== FUNCIONES DE VALIDACI√ìN ESTRICTA ====================
def validate_name(name):
    """
    Valida que el nombre tenga al menos dos palabras.
    Retorna (es_v√°lido, mensaje_error)
    """
    if not name or not name.strip():
        return False, "El nombre es obligatorio"
    
    # Limpiar espacios extra y dividir en palabras
    words = name.strip().split()
    
    if len(words) < 2:
        return False, "El nombre debe contener al menos dos palabras (nombre y apellido)"
    
    # Verificar que cada palabra tenga al menos 2 caracteres y solo contenga letras y espacios
    for word in words:
        if len(word) < 2:
            return False, "Cada palabra del nombre debe tener al menos 2 caracteres"
        if not re.match(r'^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√º√ú√±√ë]+$', word):
            return False, "El nombre solo puede contener letras y espacios"
    
    return True, ""

def validate_phone(phone):
    """
    Valida que el tel√©fono tenga exactamente 10 d√≠gitos.
    Retorna (es_v√°lido, mensaje_error)
    """
    if not phone or not phone.strip():
        return False, "El tel√©fono es obligatorio"
    
    # Limpiar espacios y caracteres especiales
    clean_phone = re.sub(r'[^0-9]', '', phone.strip())
    
    if len(clean_phone) != 10:
        return False, "El tel√©fono debe tener exactamente 10 d√≠gitos"
    
    # Verificar que todos sean d√≠gitos
    if not clean_phone.isdigit():
        return False, "El tel√©fono solo puede contener n√∫meros"
    
    return True, ""

def validate_email(email):
    """
    Valida que el email tenga formato est√°ndar.
    Retorna (es_v√°lido, mensaje_error)
    """
    if not email or not email.strip():
        return False, "El email es obligatorio"
    
    # Patr√≥n regex para email est√°ndar
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    
    if not re.match(email_pattern, email.strip()):
        return False, "El email debe tener un formato v√°lido (ejemplo: usuario@dominio.com)"
    
    return True, ""

# ==================== CONFIGURACI√ìN DE P√ÅGINA Y CSS MEJORADO ====================
st.set_page_config(
    page_title="MUPAI - Evaluaci√≥n de Patrones Alimentarios",
    page_icon="üçΩÔ∏è",
    layout="wide",
    initial_sidebar_state="collapsed"
)

st.markdown("""
<style>
:root {
    --mupai-yellow: #F4C430;
    --mupai-dark-yellow: #DAA520;
    --mupai-black: #181A1B;
    --mupai-gray: #232425;
    --mupai-light-gray: #EDEDED;
    --mupai-white: #FFFFFF;
    --mupai-success: #27AE60;
    --mupai-warning: #F39C12;
    --mupai-danger: #E74C3C;
}
/* Fondo general */
.stApp {
    background: linear-gradient(135deg, #1E1E1E 0%, #232425 100%);
}
.main-header {
    background: linear-gradient(135deg, var(--mupai-yellow) 0%, var(--mupai-dark-yellow) 100%);
    color: #181A1B;
    padding: 2rem 1rem;
    border-radius: 18px;
    text-align: center;
    margin-bottom: 2rem;
    box-shadow: 0 10px 30px rgba(244, 196, 48, 0.20);
    animation: fadeIn 0.5s ease-out;
}
.content-card {
    background: #1E1E1E;
    padding: 2rem 1.3rem;
    border-radius: 16px;
    box-shadow: 0 5px 22px 0px rgba(244,196,48,0.07), 0 1.5px 8px rgba(0,0,0,0.11);
    margin-bottom: 1.7rem;
    border-left: 5px solid var(--mupai-yellow);
    animation: slideIn 0.5s;
}
.card-psmf {
    border-left-color: var(--mupai-warning)!important;
}
.card-success {
    border-left-color: var(--mupai-success)!important;
}
.content-card, .content-card * {
    color: #FFF !important;
    font-weight: 500;
    letter-spacing: 0.02em;
}
.stButton > button {
    background: linear-gradient(135deg, var(--mupai-yellow) 0%, var(--mupai-dark-yellow) 100%);
    color: #232425;
    border: none;
    padding: 0.85rem 2.3rem;
    font-weight: bold;
    border-radius: 28px;
    transition: all 0.3s;
    box-shadow: 0 4px 16px rgba(244, 196, 48, 0.18);
    text-transform: uppercase;
    letter-spacing: 1.5px;
    font-size: 1.15rem;
}
.stButton > button:hover {
    filter: brightness(1.04);
    box-shadow: 0 7px 22px rgba(244, 196, 48, 0.24);
}
.stTextInput > div > div > input,
.stNumberInput > div > div > input,
.stSelectbox > div > div > select {
    border: 2px solid var(--mupai-yellow)!important;
    border-radius: 11px!important;
    padding: 0.7rem 0.9rem!important;
    background: #232425!important;
    color: #fff!important;
    font-size: 1.13rem!important;
    font-weight: 600!important;
}
/* Special styling for selectboxes */
.stSelectbox[data-testid="stSelectbox"] > div > div > select {
    background: #F8F9FA!important;
    color: #1E1E1E!important;
    border: 2px solid #DAA520!important;
    font-weight: bold!important;
}
.stSelectbox[data-testid="stSelectbox"] option {
    background: #FFFFFF!important;
    color: #1E1E1E!important;
    font-weight: bold!important;
}
.stTextInput label, .stNumberInput label, .stSelectbox label,
.stRadio label, .stCheckbox label, .stDateInput label, .stMarkdown,
.stExpander .streamlit-expanderHeader, .stExpander label, .stExpander p, .stExpander div {
    color: #FFD600 !important;
    opacity: 1 !important;
    font-weight: 700 !important;
    font-size: 1.04rem !important;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8) !important;
}
/* Enhanced styling for multiselect labels and info messages */
.stMultiSelect label, 
div[data-testid="stAlert"] p,
div[data-testid="stInfo"] p {
    color: #FFD600 !important;
    font-weight: 700 !important;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8) !important;
}
.stTextInput input::placeholder,
.stNumberInput input::placeholder {
    color: #e0e0e0 !important;
    opacity: 1 !important;
}
.stAlert > div {
    border-radius: 11px;
    padding: 1.1rem;
    border-left: 5px solid;
    background: #222326 !important;
    color: #FFF !important;
}
[data-testid="metric-container"] {
    background: linear-gradient(125deg, #252525 0%, #303030 100%);
    padding: 1.1rem 1rem;
    border-radius: 12px;
    border-left: 4px solid var(--mupai-yellow);
    box-shadow: 0 2.5px 11px rgba(0,0,0,0.11);
    color: #fff !important;
}
.streamlit-expanderHeader {
    background: linear-gradient(135deg, var(--mupai-gray) 70%, #242424 100%);
    border-radius: 12px;
    font-weight: bold;
    color: #FFF !important;
    border: 2px solid var(--mupai-yellow);
    font-size: 1.16rem;
}
.stRadio > div {
    background: #181A1B !important;
    padding: 1.1rem 0.5rem;
    border-radius: 10px;
    border: 2px solid transparent;
    transition: all 0.3s;
    color: #FFF !important;
}
.stRadio > div:hover {
    border-color: var(--mupai-yellow);
}
.stCheckbox > label, .stCheckbox > span {
    color: #FFF !important;
    opacity: 1 !important;
    font-size: 1.05rem;
}
.stProgress > div > div > div {
    background: linear-gradient(135deg, var(--mupai-yellow) 0%, var(--mupai-dark-yellow) 100%)!important;
    border-radius: 10px;
    animation: pulse 1.2s infinite;
}
@keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.92; }
    100% { opacity: 1; }
}
@keyframes fadeIn { from { opacity: 0; transform: translateY(20px);} to { opacity: 1; transform: translateY(0);} }
@keyframes slideIn { from { opacity: 0; transform: translateX(-18px);} to { opacity: 1; transform: translateX(0);} }
.badge {
    display: inline-block;
    padding: 0.32rem 0.98rem;
    border-radius: 18px;
    font-size: 0.97rem;
    font-weight: 800;
    margin: 0.27rem;
    color: #FFF;
    background: #313131;
    border: 1px solid #555;
}
.badge-success { background: var(--mupai-success); }
.badge-warning { background: var(--mupai-warning); color: #222; border: 1px solid #b78a09;}
.badge-danger { background: var(--mupai-danger); }
.badge-info { background: var(--mupai-yellow); color: #1E1E1E;}
.dataframe {
    border-radius: 10px !important;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0,0,0,0.08);
    background: #2A2A2A!important;
    color: #FFF!important;
}
hr {
    border: none;
    height: 2.5px;
    background: linear-gradient(to right, transparent, var(--mupai-yellow), transparent);
    margin: 2.1rem 0;
}
@media (max-width: 768px) {
    .main-header { padding: 1.2rem;}
    .content-card { padding: 1.1rem;}
    .stButton > button { padding: 0.5rem 1.1rem; font-size: 0.96rem;}
}
.content-card:hover {
    transform: translateY(-1.5px);
    box-shadow: 0 8px 27px rgba(0,0,0,0.17);
    transition: all 0.25s;
}
.gradient-text {
    background: linear-gradient(135deg, var(--mupai-yellow) 0%, var(--mupai-dark-yellow) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: 900;
    font-size: 1.11rem;
}
.footer-mupai {
    text-align: center;
    padding: 2.2rem 0.3rem 2.2rem 0.3rem;
    background: linear-gradient(135deg, #202021 0%, #232425 100%);
    border-radius: 15px;
    color: #FFF;
    margin-top: 2.2rem;
}
.footer-mupai h4 { color: var(--mupai-yellow); margin-bottom: 1.1rem;}
.footer-mupai a {
    color: var(--mupai-yellow);
    text-decoration: none;
    margin: 0 1.2rem;
    font-weight: 600;
    font-size: 1.01rem;
}
</style>
""", unsafe_allow_html=True)

# Header principal visual con logos
import base64

# Cargar y codificar los logos desde la ra√≠z del repo
try:
    with open('LOGO MUPAI.png', 'rb') as f:
        logo_mupai_b64 = base64.b64encode(f.read()).decode()
except FileNotFoundError:
    logo_mupai_b64 = ""

try:
    with open('LOGO MUP.png', 'rb') as f:
        logo_gym_b64 = base64.b64encode(f.read()).decode()
except FileNotFoundError:
    logo_gym_b64 = ""

st.markdown(f"""
<style>
.header-container {{
    background: #000000;
    padding: 2rem 1rem;
    border-radius: 18px;
    margin-bottom: 2rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    animation: fadeIn 0.5s ease-out;
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: relative;
}}

.logo-left, .logo-right {{
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    max-width: 150px;
}}

.logo-left img, .logo-right img {{
    max-height: 80px;
    max-width: 100%;
    height: auto;
    width: auto;
    object-fit: contain;
}}

.header-center {{
    flex: 1;
    text-align: center;
    padding: 0 2rem;
}}

.header-title {{
    color: #FFB300;
    font-size: 2.2rem;
    font-weight: 900;
    margin: 0;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    line-height: 1.2;
}}

.header-subtitle {{
    color: #FFFFFF;
    font-size: 1rem;
    margin: 0.5rem 0 0 0;
    opacity: 0.9;
}}

@media (max-width: 768px) {{
    .header-container {{
        flex-direction: column;
        text-align: center;
    }}
    
    .logo-left, .logo-right {{
        margin-bottom: 1rem;
    }}
    
    .header-center {{
        padding: 0;
    }}
    
    .header-title {{
        font-size: 1.8rem;
    }}
}}
</style>

<div class="header-container">
    <div class="logo-left">
        <img src="data:image/png;base64,{logo_mupai_b64}" alt="LOGO MUPAI" />
    </div>
    <div class="header-center">
        <h1 class="header-title">TEST MUPAI: PATRONES ALIMENTARIOS</h1>
        <p class="header-subtitle">Tu evaluaci√≥n personalizada de h√°bitos y preferencias alimentarias basada en ciencia</p>
    </div>
    <div class="logo-right">
        <img src="data:image/png;base64,{logo_gym_b64}" alt="LOGO MUSCLE UP GYM" />
    </div>
</div>
""", unsafe_allow_html=True)

# --- Inicializaci√≥n de estado de sesi√≥n robusta (solo una vez)
defaults = {
    "datos_completos": False,
    "correo_enviado": False,
    "preferencias_alimentarias": {},
    "restricciones_dieteticas": {},
    "nombre": "",
    "telefono": "",
    "email_cliente": "",
    "edad": "",
    "sexo": "Hombre",
    "fecha_llenado": datetime.now().strftime("%Y-%m-%d"),
    "acepto_terminos": False,
    "authenticated": False,  # Nueva variable para controlar el login
    # Variables para el flujo progresivo
    "current_step": 1,
    "step_completed": {
        1: False,  # Prote√≠nas grasas
        2: False,  # Prote√≠nas magras
        3: False,  # Grasas saludables
        4: False,  # Carbohidratos
        5: False,  # Vegetales
        6: False,  # Frutas
        7: False,  # Aceites de cocci√≥n
        8: False,  # Bebidas
        9: False,  # Alergias/intolerancias
        10: False,  # Antojos
        11: False,  # Frecuencia de comidas
        12: False   # Sugerencias de men√∫s
    },
    "max_unlocked_step": 1
}
for k, v in defaults.items():
    if k not in st.session_state:
        st.session_state[k] = v

# ==================== SISTEMA DE AUTENTICACI√ìN ====================
ADMIN_PASSWORD = "MUPAI2025"  # Contrase√±a predefinida

# Si no est√° autenticado, mostrar login
if not st.session_state.authenticated:
    st.markdown("""
    <div class="content-card" style="max-width: 500px; margin: 2rem auto; text-align: center;">
        <h2 style="color: var(--mupai-yellow); margin-bottom: 1.5rem;">
            üîê Acceso Exclusivo
        </h2>
        <p style="margin-bottom: 2rem; color: #CCCCCC;">
            Ingresa la contrase√±a para acceder al sistema de evaluaci√≥n de patrones alimentarios MUPAI
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Container centrado para el formulario de login
    login_container = st.container()
    with login_container:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            password_input = st.text_input(
                "Contrase√±a", 
                type="password", 
                placeholder="Ingresa la contrase√±a de acceso",
                key="password_input"
            )
            
            if st.button("üöÄ Acceder al Sistema", use_container_width=True):
                if password_input == ADMIN_PASSWORD:
                    st.session_state.authenticated = True
                    st.success("‚úÖ Acceso autorizado. Bienvenido al sistema MUPAI de patrones alimentarios.")
                    st.rerun()
                else:
                    st.error("‚ùå Contrase√±a incorrecta. Acceso denegado.")
    
    # Mostrar informaci√≥n mientras no est√© autenticado
    st.markdown("""
    <div class="content-card" style="margin-top: 3rem; text-align: center; background: #1A1A1A;">
        <h3 style="color: var(--mupai-yellow);">Sistema de Evaluaci√≥n de Patrones Alimentarios</h3>
        <p style="color: #CCCCCC;">
            MUPAI utiliza metodolog√≠as cient√≠ficas avanzadas para evaluar patrones alimentarios 
            personalizados, preferencias diet√©ticas y crear planes nutricionales adaptativos.
        </p>
        <p style="color: #999999; font-size: 0.9rem; margin-top: 1.5rem;">
            ¬© 2025 MUPAI - Muscle up GYM 
            Digital Nutrition Science
            Alimentary Pattern Assessment Intelligence
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    st.stop()  # Detener la ejecuci√≥n hasta que se autentique

# Tarjetas visuales robustas
def crear_tarjeta(titulo, contenido, tipo="info"):
    colores = {
        "info": "var(--mupai-yellow)",
        "success": "var(--mupai-success)",
        "warning": "var(--mupai-warning)",
        "danger": "var(--mupai-danger)"
    }
    color = colores.get(tipo, "var(--mupai-yellow)")
    return f"""
    <div class="content-card" style="border-left-color: {color};">
        <h3 style="margin-bottom: 1rem;">{titulo}</h3>
        <div>{contenido}</div>
    </div>
    """

def enviar_email_resumen(contenido, nombre_cliente, email_cliente, fecha, edad, telefono):
    """Env√≠a el email con el resumen completo de la evaluaci√≥n de patrones alimentarios."""
    try:
        email_origen = "administracion@muscleupgym.fitness"
        email_destino = "administracion@muscleupgym.fitness"
        password = st.secrets.get("zoho_password", "TU_PASSWORD_AQUI")

        msg = MIMEMultipart()
        msg['From'] = email_origen
        msg['To'] = email_destino
        msg['Subject'] = f"Evaluaci√≥n patrones alimentarios MUPAI - {nombre_cliente} ({fecha})"

        msg.attach(MIMEText(contenido, 'plain'))

        server = smtplib.SMTP('smtp.zoho.com', 587)
        server.starttls()
        server.login(email_origen, password)
        server.send_message(msg)
        server.quit()

        return True
    except Exception as e:
        st.error(f"Error al enviar email: {str(e)}")
        return False

# ==================== VISUALES INICIALES ====================

# Misi√≥n, Visi√≥n y Compromiso con dise√±o mejorado
with st.expander("üéØ **Misi√≥n, Visi√≥n y Compromiso MUPAI**", expanded=False):
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(crear_tarjeta(
            "üéØ Misi√≥n",
            "Hacer accesible la evaluaci√≥n nutricional basada en ciencia, ofreciendo an√°lisis de patrones alimentarios personalizados que se adaptan a todos los estilos de vida.",
            "info"
        ), unsafe_allow_html=True)
    with col2:
        st.markdown(crear_tarjeta(
            "üëÅÔ∏è Visi√≥n",
            "Ser el referente global en evaluaci√≥n de patrones alimentarios digitales, uniendo investigaci√≥n nutricional con experiencia pr√°ctica personalizada.",
            "success"
        ), unsafe_allow_html=True)
    with col3:
        st.markdown(crear_tarjeta(
            "ü§ù Compromiso",
            "Nos guiamos por la √©tica, transparencia y precisi√≥n cient√≠fica para ofrecer recomendaciones nutricionales reales, medibles y sostenibles.",
            "warning"
        ), unsafe_allow_html=True)

# BLOQUE 0: Datos personales con dise√±o mejorado
st.markdown('<div class="content-card">', unsafe_allow_html=True)
st.markdown("### üë§ Informaci√≥n Personal")
st.markdown("Por favor, completa todos los campos para comenzar tu evaluaci√≥n de patrones alimentarios personalizada.")

col1, col2 = st.columns(2)
with col1:
    nombre = st.text_input("Nombre completo*", value=st.session_state.get('nombre', ''), placeholder="Ej: Juan P√©rez Garc√≠a", help="Tu nombre legal completo")
    telefono = st.text_input("Tel√©fono*", value=st.session_state.get('telefono', ''), placeholder="Ej: 8661234567", help="10 d√≠gitos sin espacios")
    email_cliente = st.text_input("Email*", value=st.session_state.get('email_cliente', ''), placeholder="correo@ejemplo.com", help="Email v√°lido para recibir resultados")

with col2:
    # Fix edad type issue by ensuring it's an integer
    edad_value = st.session_state.get('edad', 25)
    if isinstance(edad_value, str):
        try:
            edad_value = int(edad_value)
        except (ValueError, TypeError):
            edad_value = 25
    
    edad = st.number_input("Edad (a√±os)*", min_value=15, max_value=80, value=edad_value, help="Tu edad actual")
    sexo = st.selectbox("Sexo biol√≥gico*", options=["Hombre", "Mujer"], index=0 if st.session_state.get('sexo', 'Hombre') == 'Hombre' else 1, placeholder="Selecciona una opci√≥n", help="Necesario para an√°lisis nutricionales precisos")
    fecha_llenado = datetime.now().strftime("%Y-%m-%d")
    st.info(f"üìÖ Fecha de evaluaci√≥n: {fecha_llenado}")

acepto_terminos = st.checkbox("He le√≠do y acepto la pol√≠tica de privacidad y el descargo de responsabilidad", value=st.session_state.get('acepto_terminos', False))

if st.button("üöÄ COMENZAR EVALUACI√ìN", disabled=not acepto_terminos):
    # Validaci√≥n estricta de cada campo
    name_valid, name_error = validate_name(nombre)
    phone_valid, phone_error = validate_phone(telefono)
    email_valid, email_error = validate_email(email_cliente)
    
    # Mostrar errores espec√≠ficos para cada campo que falle
    validation_errors = []
    if not name_valid:
        validation_errors.append(f"**Nombre:** {name_error}")
    if not phone_valid:
        validation_errors.append(f"**Tel√©fono:** {phone_error}")
    if not email_valid:
        validation_errors.append(f"**Email:** {email_error}")
    
    # Solo proceder si todas las validaciones pasan
    if name_valid and phone_valid and email_valid:
        st.session_state.datos_completos = True
        st.session_state.nombre = nombre
        st.session_state.telefono = telefono
        st.session_state.email_cliente = email_cliente
        st.session_state.edad = edad
        st.session_state.sexo = sexo
        st.session_state.fecha_llenado = fecha_llenado
        st.session_state.acepto_terminos = acepto_terminos
        st.success("‚úÖ Datos registrados correctamente. ¬°Continuemos con tu evaluaci√≥n de patrones alimentarios!")
    else:
        # Mostrar todos los errores de validaci√≥n
        error_message = "‚ö†Ô∏è **Por favor corrige los siguientes errores:**\n\n" + "\n\n".join(validation_errors)
        st.error(error_message)

st.markdown('</div>', unsafe_allow_html=True)

if not st.session_state.datos_completos:
    st.markdown("""
    <div class="content-card" style="margin-top:2rem; padding:3rem; background: #181A1B; color: #F5F5F5; border-left: 5px solid #F4C430;">
        <div style="text-align:center;">
            <h2 style="color: #F5C430; font-weight:900; margin:0;">
                üçΩÔ∏è Bienvenido a MUPAI Patrones Alimentarios
            </h2>
            <p style="color: #F5F5F5;font-size:1.1rem;font-weight:600;margin-top:1.5rem;">
                <span style="font-size:1.15rem; font-weight:700;">¬øC√≥mo funciona la evaluaci√≥n?</span>
            </p>
            <div style="text-align:left;display:inline-block;max-width:650px;">
                <ul style="list-style:none;padding:0;">
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">üìù</span> <b>Paso 1:</b> Informaci√≥n personal<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Recopilamos tu informaci√≥n b√°sica para personalizar la evaluaci√≥n nutricional.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">ü•©</span> <b>Paso 2:</b> Prote√≠nas animales con m√°s contenido graso<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Identificamos huevos, embutidos, carnes grasas, quesos altos en grasa y pescados grasos.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">üçó</span> <b>Paso 3:</b> Prote√≠nas animales magras<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Evaluamos carnes magras, pescados blancos, quesos bajos en grasa y l√°cteos light.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">ü•ë</span> <b>Paso 4:</b> Fuentes de grasa saludable<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Analizamos grasas naturales, frutos secos, semillas y mantequillas vegetales.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">üçû</span> <b>Paso 5:</b> Carbohidratos complejos y cereales<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Evaluamos cereales integrales, tortillas, panes, ra√≠ces, tub√©rculos y leguminosas.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">ü•¨</span> <b>Paso 6:</b> Vegetales y frutas<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Identificamos todos los vegetales y frutas que consumes o toleras f√°cilmente.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">üç≥</span> <b>Paso 7:</b> Aceites de cocci√≥n y bebidas<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Evaluamos tus preferencias de aceites para cocinar y bebidas sin calor√≠as.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">üö®</span> <b>Paso 8:</b> Alergias, intolerancias y m√©todos de cocci√≥n<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Identificamos restricciones alimentarias y m√©todos de cocci√≥n disponibles.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">üòã</span> <b>Paso 9:</b> Patrones de antojos alimentarios<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Analizamos antojos dulces, salados, comida r√°pida y condimentos estimulantes.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">üìà</span> <b>Resultado final:</b> Perfil alimentario completo<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Recibes un an√°lisis detallado de tus patrones alimentarios y recomendaciones personalizadas.
                        </span>
                    </li>
                </ul>
                <div style="margin-top:1.2em; font-size:1rem; color:#F4C430;">
                    <b>Finalidad:</b> Esta evaluaci√≥n integra principios de nutrici√≥n personalizada para ofrecerte recomendaciones alimentarias que se ajusten a tu estilo de vida y preferencias espec√≠ficas. <br>
                    <b>Tiempo estimado:</b> Menos de 10 minutos.
                </div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

# VALIDACI√ìN DATOS PERSONALES PARA CONTINUAR
datos_personales_completos = all([nombre, telefono, email_cliente]) and acepto_terminos

if datos_personales_completos and st.session_state.datos_completos:
    # Progress bar mejorado y m√°s prominente
    st.markdown("### üìä Progreso de tu Evaluaci√≥n")
    progress = st.progress(0, text="Iniciando evaluaci√≥n...")
    progress_container = st.container()
    
    # CUESTIONARIO DE SELECCI√ìN ALIMENTARIA PERSONALIZADA CON MEJOR DISE√ëO
    st.markdown("""
    <div class="content-card" style="background: linear-gradient(135deg, #F4C430 0%, #DAA520 100%); color: #1E1E1E; margin-bottom: 2rem; border: 3px solid #DAA520;">
        <h2 style="color: #1E1E1E; text-align: center; margin-bottom: 1.5rem;">
            üßæ CUESTIONARIO DE SELECCI√ìN ALIMENTARIA PERSONALIZADA
        </h2>
        <div style="text-align: left; font-size: 1.1rem; line-height: 1.6;">
            <p><strong>üìã Instrucciones importantes:</strong></p>
            <ul style="margin-left: 1rem;">
                <li><strong>‚úÖ Selecciona m√∫ltiples opciones:</strong> Puedes marcar TODOS los alimentos que consumes o disfrutas en cada categor√≠a</li>
                <li><strong>üéØ S√© espec√≠fico:</strong> Entre m√°s alimentos marques, m√°s personalizado ser√° tu plan nutricional</li>
                <li><strong>‚è±Ô∏è Tiempo estimado:</strong> 5-8 minutos para completar toda la evaluaci√≥n</li>
                <li><strong>üí° Consejo:</strong> Si tienes dudas sobre un alimento, m√°rcalo. Es mejor incluir m√°s opciones</li>
            </ul>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Navegaci√≥n mejorada por pasos - Ahora refleja el progreso real
    current_step = st.session_state.get('current_step', 1)
    max_unlocked = st.session_state.get('max_unlocked_step', 1)
    step_completed = st.session_state.get('step_completed', {})
    
    # Verificar estado de validaci√≥n en tiempo real
    step_validators = {
        1: validate_step_1(),
        2: validate_step_2(),
        3: validate_step_3(),
        4: validate_step_4(),
        5: validate_step_5(),
        6: validate_step_6(),
        7: validate_step_7(),
        8: validate_step_8(),
        9: validate_step_9(),
        10: validate_step_10(),
        11: validate_step_11(),
        12: validate_step_12()
    }
    
    st.markdown(f"""
    <div class="content-card" style="background: #2A2A2A; border-left: 5px solid #F4C430;">
        <h3 style="color: #F4C430; text-align: center; margin-bottom: 1rem;">üó∫Ô∏è Progreso del Cuestionario</h3>
        <div style="display: flex; justify-content: space-between; flex-wrap: wrap; gap: 10px;">
            <div style="text-align: center; flex: 1; min-width: 120px;">
                <div style="background: {'#F4C430' if current_step == 1 else '#27AE60' if step_validators[1] else '#E74C3C'}; color: #1E1E1E; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; margin: 0 auto 5px; font-weight: bold;">{'‚úì' if step_validators[1] else '1'}</div>
                <small>Prote√≠nas Grasas</small>
            </div>
            <div style="text-align: center; flex: 1; min-width: 120px;">
                <div style="background: {'#F4C430' if current_step == 2 else '#27AE60' if step_validators[2] else '#E74C3C' if max_unlocked >= 2 else '#666'}; color: {'#1E1E1E' if current_step == 2 or step_validators[2] else '#FFF'}; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; margin: 0 auto 5px; font-weight: bold;">{'‚úì' if step_validators[2] else '2'}</div>
                <small>Prote√≠nas Magras</small>
            </div>
            <div style="text-align: center; flex: 1; min-width: 120px;">
                <div style="background: {'#F4C430' if current_step == 3 else '#27AE60' if step_validators[3] else '#E74C3C' if max_unlocked >= 3 else '#666'}; color: {'#1E1E1E' if current_step == 3 or step_validators[3] else '#FFF'}; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; margin: 0 auto 5px; font-weight: bold;">{'‚úì' if step_validators[3] else '3'}</div>
                <small>Grasas Saludables</small>
            </div>
            <div style="text-align: center; flex: 1; min-width: 120px;">
                <div style="background: {'#F4C430' if current_step == 4 else '#27AE60' if step_validators[4] else '#E74C3C' if max_unlocked >= 4 else '#666'}; color: {'#1E1E1E' if current_step == 4 or step_validators[4] else '#FFF'}; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; margin: 0 auto 5px; font-weight: bold;">{'‚úì' if step_validators[4] else '4'}</div>
                <small>Carbohidratos</small>
            </div>
            <div style="text-align: center; flex: 1; min-width: 120px;">
                <div style="background: {'#F4C430' if current_step == 5 else '#27AE60' if step_validators[5] else '#E74C3C' if max_unlocked >= 5 else '#666'}; color: {'#1E1E1E' if current_step == 5 or step_validators[5] else '#FFF'}; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; margin: 0 auto 5px; font-weight: bold;">{'‚úì' if step_validators[5] else '5'}</div>
                <small>Vegetales</small>
            </div>
            <div style="text-align: center; flex: 1; min-width: 120px;">
                <div style="background: {'#F4C430' if current_step == 6 else '#27AE60' if step_validators[6] else '#E74C3C' if max_unlocked >= 6 else '#666'}; color: {'#1E1E1E' if current_step == 6 or step_validators[6] else '#FFF'}; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; margin: 0 auto 5px; font-weight: bold;">{'‚úì' if step_validators[6] else '6'}</div>
                <small>Frutas</small>
            </div>
        </div>
        <div style="text-align: center; margin-top: 1rem; color: #CCCCCC;">
            <small>Paso {current_step} de 12 - {'‚úÖ Completado' if step_validators.get(current_step, False) else '‚è≥ En progreso'}</small>
        </div>
        <div style="text-align: center; margin-top: 0.5rem; font-size: 0.9rem;">
            <span style="color: #27AE60;">‚óè Completo</span> | 
            <span style="color: #F4C430;">‚óè Actual</span> | 
            <span style="color: #E74C3C;">‚óè Incompleto</span> | 
            <span style="color: #666;">‚óè Bloqueado</span>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Mostrar solo el paso actual
    current_step = st.session_state.get('current_step', 1)

    # GRUPO 1: PROTE√çNA ANIMAL CON M√ÅS CONTENIDO GRASO
    if current_step == 1:
        # Add prominent visual step indicator
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);
            border: 3px solid #4CAF50;
            animation: slideIn 0.5s ease-out;
        ">
            <h2 style="margin: 0; font-size: 1.8rem; font-weight: bold; color: white;">
                ü•© PASO 1: PROTE√çNA ANIMAL CON M√ÅS CONTENIDO GRASO
            </h2>
            <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9; color: white;">
                Est√°s en el paso 1 de 12 - Selecciona las prote√≠nas grasas que consumes
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add unique HTML marker for this step
        st.markdown("""
        <div id="paso1"></div>
        <script>
        // Auto-scroll to this step's marker and focus on first input for better UX
        setTimeout(function() {
            const stepElement = window.parent.document.getElementById('paso1');
            if (stepElement) {
                stepElement.scrollIntoView({behavior: 'smooth'});
                // Focus on the first multiselect dropdown in this step
                setTimeout(function() {
                    const firstMultiselect = window.parent.document.querySelector('[data-testid="stMultiSelect"] input');
                    if (firstMultiselect) {
                        firstMultiselect.focus();
                        firstMultiselect.click();
                    }
                }, 200);
            }
        }, 100);
        </script>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="content-card" style="background: linear-gradient(135deg, #F4C430 0%, #DAA520 100%); color: #1E1E1E; margin-bottom: 2rem; border: 3px solid #DAA520;">
            <h2 style="color: #1E1E1E; text-align: center; margin-bottom: 1rem;">
                ü•© PASO 1: PROTE√çNA ANIMAL CON M√ÅS CONTENIDO GRASO
            </h2>
        </div>
        """, unsafe_allow_html=True)
        
        # Actualizar progreso
        progress.progress(8, text="Paso 1 de 12: Prote√≠nas con m√°s contenido graso")
        
        # Actualizar indicador visual
        st.markdown("""
        <div style="text-align: center; margin-bottom: 1rem;">
            <div style="background: #F4C430; color: #1E1E1E; border-radius: 50%; width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; margin: 0 auto; font-weight: bold; font-size: 1.2rem;">1</div>
            <h4 style="color: #F4C430; margin-top: 0.5rem;">PASO ACTUAL</h4>
        </div>
        """, unsafe_allow_html=True)

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("""
        ### üéØ ¬øQu√© necesitamos saber?
        En este paso evaluaremos las **prote√≠nas animales con mayor contenido graso** que consumes. 
        Estos alimentos son importantes para la saciedad y el aporte de grasas esenciales.
        
        **üí° Instrucci√≥n:** Marca TODOS los alimentos que consumes habitualmente o que disfrutas comer.
        """)
        
        st.markdown("#### üç≥ Huevos y embutidos")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        huevos_embutidos = st.multiselect(
            "¬øCu√°les de estos huevos y embutidos consumes? (Puedes seleccionar varios)",
            ["Huevo entero", "Chorizo", "Salchicha (Viena, alemana, parrillera)", "Longaniza", "Tocino", "Jam√≥n serrano", "Jam√≥n ib√©rico", "Salami", "Mortadela", "Pastrami", "Pepperoni", "Ninguno"],
            key="huevos_embutidos",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todos los que consumes. Marca 'Ninguno' si no consumes ninguno de estos alimentos."
        )
        
        st.markdown("#### ü•© Carnes de res grasas")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        carnes_res_grasas = st.multiselect(
            "¬øCu√°les de estas carnes de res grasas consumes? (Puedes seleccionar varios)",
            ["Aguja norte√±a", "Diezmillo marmoleado", "Costilla/Costillar", "Ribeye", "New York", "T-bone", "Porterhouse", "Prime rib", "Arrachera", "Pica√±a", "Suadero", "Brisket/Pecho de res", "Chamberete con tu√©tano", "Falda marmoleada", "Molida 80/20", "Molida 85/15", "Carne para asar con grasa", "Chuck roast (diezmillo graso)", "Paleta con grasa", "Retazo con grasa", "Short ribs", "Cowboy steak", "Tomahawk", "Matambre", "Entra√±a", "Ninguno"],
            key="carnes_res_grasas",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Incluye todos los cortes que consumes. Marca 'Ninguno' si no consumes ninguno de estos cortes."
        )
        
        st.markdown("#### üê∑ Carnes de cerdo grasas")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        carnes_cerdo_grasas = st.multiselect(
            "¬øCu√°les de estas carnes de cerdo grasas consumes? (Puedes seleccionar varios)",
            ["Costilla de cerdo", "Panceta (belly)", "Chuleta con grasa", "Carnitas", "Chicharr√≥n prensado", "Codillo", "Espalda (Boston butt)", "Picnic shoulder", "Pata de cerdo", "Ninguno"],
            key="carnes_cerdo_grasas",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Incluye todos los cortes que consumes. Marca 'Ninguno' si no consumes ninguno de estos cortes."
        )
        
        st.markdown("#### üêî Carnes de pollo/pavo grasas")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        carnes_pollo_grasas = st.multiselect(
            "¬øCu√°les de estas carnes de pollo/pavo grasas consumes? (Puedes seleccionar varios)",
            ["Muslo de pollo con piel", "Pierna de pollo con piel", "Alitas de pollo", "Pollo entero con piel", "Pavo con piel", "Muslo de pavo", "Ninguno"],
            key="carnes_pollo_grasas",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Incluye todos los cortes que consumes. Marca 'Ninguno' si no consumes ninguno de estos cortes."
        )
        
        st.markdown("#### ü´Ä √ìrganos y v√≠sceras grasas")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        organos_grasos = st.multiselect(
            "¬øCu√°les de estos √≥rganos y v√≠sceras grasas consumes? (Puedes seleccionar varios)",
            ["Sesos de res", "Tu√©tano de res", "Molleja de res", "H√≠gado de res", "Ri√±√≥n de res", "Ninguno"],
            key="organos_grasos",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Incluye todos los √≥rganos que consumes. Marca 'Ninguno' si no consumes ninguno de estos alimentos."
        )
        
        st.markdown("#### üßÄ Quesos altos en grasa")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        quesos_grasos = st.multiselect(
            "¬øCu√°les de estos quesos altos en grasa consumes? (Puedes seleccionar varios)",
            ["Queso manchego", "Queso doble crema", "Queso oaxaca", "Queso gouda", "Queso crema", "Queso cheddar", "Queso roquefort", "Queso brie", "Queso camembert", "Queso parmesano", "Queso gruyere", "Queso de cabra maduro", "Ninguno"],
            key="quesos_grasos",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todos los quesos que consumes. Marca 'Ninguno' si no consumes ninguno de estos quesos."
        )
        
        st.markdown("#### ü•õ L√°cteos enteros")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        lacteos_enteros = st.multiselect(
            "¬øCu√°les de estos l√°cteos enteros consumes? (Puedes seleccionar varios)",
            ["Leche entera", "Yogur entero azucarado", "Yogur tipo griego entero", "Yogur de frutas azucarado", 
             "Yogur bebible regular", "Crema", "Queso para untar (tipo Philadelphia original)", "Nata", "Crema agria", "Ninguno"],
            key="lacteos_enteros",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Incluye todos los l√°cteos enteros que uses. Marca 'Ninguno' si no consumes ninguno de estos l√°cteos."
        )
        
        st.markdown("#### üêü Pescados grasos")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        pescados_grasos = st.multiselect(
            "¬øCu√°les de estos pescados grasos consumes? (Puedes seleccionar varios)",
            ["At√∫n en aceite", "Salm√≥n", "Sardinas", "Macarela", "Trucha", "Arenque", "Anchovetas", "Pez espada", "Anguila", "Ninguno"],
            key="pescados_grasos",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todos los pescados grasos que consumes. Marca 'Ninguno' si no consumes ninguno de estos pescados."
        )
        
        st.markdown("#### ü¶ê Mariscos/comida marina grasos")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        mariscos_grasos = st.multiselect(
            "¬øCu√°les de estos mariscos/comida marina grasos consumes? (Puedes seleccionar varios)",
            ["Pulpo", "Calamar", "Mejillones", "Ostras", "Cangrejo", "Langosta", "Caracol de mar", "Ninguno"],
            key="mariscos_grasos",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todos los mariscos grasos que consumes. Marca 'Ninguno' si no consumes ninguno de estos mariscos."
        )

        # Resumen del paso actual
        total_seleccionados = (len(st.session_state.get('huevos_embutidos', [])) + 
                              len(st.session_state.get('carnes_res_grasas', [])) + 
                              len(st.session_state.get('carnes_cerdo_grasas', [])) + 
                              len(st.session_state.get('carnes_pollo_grasas', [])) + 
                              len(st.session_state.get('organos_grasos', [])) + 
                              len(st.session_state.get('quesos_grasos', [])) + 
                              len(st.session_state.get('lacteos_enteros', [])) + 
                              len(st.session_state.get('pescados_grasos', [])) + 
                              len(st.session_state.get('mariscos_grasos', [])))
        if total_seleccionados > 0:
            st.success(f"‚úÖ **¬°Excelente!** Has seleccionado {total_seleccionados} alimentos en este grupo. Esto nos ayudar√° a personalizar mejor tu plan.")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de navegaci√≥n
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Anterior", disabled=True):
                pass
        with col3:
            if st.button("Siguiente ‚û°Ô∏è"):
                advance_to_next_step()

    # GRUPO 2: PROTE√çNA ANIMAL MAGRA
    elif current_step == 2:
        # Add prominent visual step indicator
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(33, 150, 243, 0.3);
            border: 3px solid #2196F3;
            animation: slideIn 0.5s ease-out;
        ">
            <h2 style="margin: 0; font-size: 1.8rem; font-weight: bold; color: white;">
                üçó PASO 2: PROTE√çNA ANIMAL MAGRA
            </h2>
            <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9; color: white;">
                Est√°s en el paso 2 de 12 - Selecciona las prote√≠nas magras que consumes
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add unique HTML marker for this step
        st.markdown("""
        <div id="paso2"></div>
        <script>
        // Auto-scroll to this step's marker and focus on first input for better UX
        setTimeout(function() {
            const stepElement = window.parent.document.getElementById('paso2');
            if (stepElement) {
                stepElement.scrollIntoView({behavior: 'smooth'});
                // Focus on the first multiselect dropdown in this step
                setTimeout(function() {
                    const firstMultiselect = window.parent.document.querySelector('[data-testid="stMultiSelect"] input');
                    if (firstMultiselect) {
                        firstMultiselect.focus();
                        firstMultiselect.click();
                    }
                }, 200);
            }
        }, 100);
        </script>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="content-card" style="background: linear-gradient(135deg, #F4C430 0%, #DAA520 100%); color: #1E1E1E; margin-bottom: 2rem; border: 3px solid #DAA520;">
            <h2 style="color: #1E1E1E; text-align: center; margin-bottom: 1rem;">
                üçó PASO 2: PROTE√çNA ANIMAL MAGRA
            </h2>
        </div>
        """, unsafe_allow_html=True)
        
        # Actualizar progreso
        progress.progress(17, text="Paso 2 de 12: Prote√≠nas animales magras")
        
        # Actualizar indicador visual
        st.markdown("""
        <div style="text-align: center; margin-bottom: 1rem;">
            <div style="background: #F4C430; color: #1E1E1E; border-radius: 50%; width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; margin: 0 auto; font-weight: bold; font-size: 1.2rem;">2</div>
            <h4 style="color: #F4C430; margin-top: 0.5rem;">PASO ACTUAL</h4>
        </div>
        """, unsafe_allow_html=True)

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("""
        ### üéØ ¬øQu√© necesitamos saber?
        En este paso evaluaremos las **prote√≠nas animales magras** que consumes. 
        Estos alimentos son excelentes fuentes de prote√≠na con menor contenido graso.
        
        **üí° Instrucci√≥n:** Marca TODOS los alimentos que te resultan f√°ciles de consumir o que disfrutas.
        """)
        
        st.markdown("#### üêÑ Carnes de res magras")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        carnes_res_magras = st.multiselect(
            "¬øCu√°les de estas carnes de res magras consumes? (Puedes seleccionar varios)",
            ["Filete (lomo fino)", "Lomo bajo (striploin limpio)", "Centro de diezmillo limpio", "Sirloin limpio/Aguay√≥n", "Bola/Pulpa bola", "Cuete", "Pulpa negra", "Pulpa blanca", "Espaldilla limpia", "Milanesa de bola", "Bistec de pierna", "Molida 90/10", "Molida 95/5", "Molida 97/3", "Falda limpia", "Chamorro limpio", "Tampique√±a magra", "Medallones de res magros", "Top round", "Bottom round", "Flank steak limpio", "Maciza limpia", "Ninguno"],
            key="carnes_res_magras",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todas las carnes de res magras que consumas. Marca 'Ninguno' si no consumes ninguna de estas carnes."
        )
        
        st.markdown("#### üê∑ Carnes de cerdo magras")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        carnes_cerdo_magras = st.multiselect(
            "¬øCu√°les de estas carnes de cerdo magras consumes? (Puedes seleccionar varios)",
            ["Lomo de cerdo", "Filete de cerdo", "Chuleta magra sin grasa", "Solomillo de cerdo", "Tenderloin", "Ninguno"],
            key="carnes_cerdo_magras",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todas las carnes de cerdo magras que consumas. Marca 'Ninguno' si no consumes ninguna de estas carnes."
        )
        
        st.markdown("#### üêî Carnes de pollo/pavo magras")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        carnes_pollo_magras = st.multiselect(
            "¬øCu√°les de estas carnes de pollo/pavo magras consumes? (Puedes seleccionar varios)",
            ["Pechuga de pollo sin piel", "Pechuga de pavo sin piel", "Muslo de pollo sin piel", "Pierna de pavo sin piel", "Ninguno"],
            key="carnes_pollo_magras",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todas las carnes de pollo/pavo magras que consumas. Marca 'Ninguno' si no consumes ninguna de estas carnes."
        )
        
        st.markdown("#### ü´Ä √ìrganos y v√≠sceras magros")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        organos_magros = st.multiselect(
            "¬øCu√°les de estos √≥rganos y v√≠sceras magros consumes? (Puedes seleccionar varios)",
            ["Coraz√≥n de res", "Lengua de res", "H√≠gado de ternera", "Ri√±ones de ternera", "Coraz√≥n de pollo", "H√≠gado de pollo", "Molleja de ternera", "Ninguno"],
            key="organos_magros",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todos los √≥rganos magros que consumas. Marca 'Ninguno' si no consumes ninguno de estos alimentos."
        )
        
        st.markdown("#### üêü Pescados magros")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        pescados_magros = st.multiselect(
            "¬øCu√°les de estos pescados magros consumes? (Puedes seleccionar varios)",
            ["Tilapia", "Basa", "Huachinango", "Merluza", "Robalo", "At√∫n en agua", "Bacalao", "Lenguado", "Mero", "Dorado", "Pargo", "Ninguno"],
            key="pescados_magros",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todos los pescados magros que consumas. Marca 'Ninguno' si no consumes ninguno de estos pescados."
        )
        
        st.markdown("#### ü¶ê Mariscos/comida marina magros")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        mariscos_magros = st.multiselect(
            "¬øCu√°les de estos mariscos/comida marina magros consumes? (Puedes seleccionar varios)",
            ["Camar√≥n", "Callo de hacha", "Almeja", "Langostino", "Jaiba", "Ninguno"],
            key="mariscos_magros",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todos los mariscos magros que consumas. Marca 'Ninguno' si no consumes ninguno de estos mariscos."
        )
        
        st.markdown("#### üßÄ Quesos magros")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        quesos_magros = st.multiselect(
            "¬øCu√°les de estos quesos magros consumes? (Puedes seleccionar varios)",
            ["Queso panela", "Queso cottage", "Queso ricotta light", "Queso oaxaca reducido en grasa", 
             "Queso mozzarella light", "Queso fresco bajo en grasa", "Queso de cabra magro", "Ninguno"],
            key="quesos_magros",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todos los quesos magros que consumes. Marca 'Ninguno' si no consumes ninguno de estos quesos."
        )
        
        st.markdown("#### ü•õ L√°cteos light o reducidos")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        lacteos_light = st.multiselect(
            "¬øCu√°les de estos l√°cteos light o reducidos consumes? (Puedes seleccionar varios)",
            ["Leche descremada", "Leche deslactosada light", "Leche de almendra sin az√∫car", 
             "Leche de coco sin az√∫car", "Leche de soya sin az√∫car", "Yogur griego natural sin az√∫car", 
             "Yogur griego light", "Yogur bebible bajo en grasa", "Yogur sin az√∫car a√±adida", 
             "Yogur de frutas bajo en grasa y sin az√∫car a√±adida", "Queso crema light", "Ninguno"],
            key="lacteos_light",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Incluye todos los l√°cteos light que uses. Marca 'Ninguno' si no consumes ninguno de estos l√°cteos."
        )
        
        st.markdown("#### ü•ö Huevos y embutidos light")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        huevos_embutidos_light = st.multiselect(
            "¬øCu√°les de estos huevos y embutidos light consumes? (Puedes seleccionar varios)",
            ["Clara de huevo", "Jam√≥n de pechuga de pavo", "Jam√≥n de pierna bajo en grasa", "Salchicha de pechuga de pavo (light)", "Pechuga de pavo rebanada", "Jam√≥n serrano magro", "Ninguno"],
            key="huevos_embutidos_light",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todos los huevos y embutidos light que consumes. Marca 'Ninguno' si no consumes ninguno de estos alimentos."
        )
        # Resumen del paso actual
        total_seleccionados = (len(st.session_state.get('carnes_res_magras', [])) + 
                              len(st.session_state.get('carnes_cerdo_magras', [])) + 
                              len(st.session_state.get('carnes_pollo_magras', [])) + 
                              len(st.session_state.get('organos_magros', [])) + 
                              len(st.session_state.get('pescados_magros', [])) + 
                              len(st.session_state.get('mariscos_magros', [])) + 
                              len(st.session_state.get('quesos_magros', [])) + 
                              len(st.session_state.get('lacteos_light', [])) + 
                              len(st.session_state.get('huevos_embutidos_light', [])))
        if total_seleccionados > 0:
            st.success(f"‚úÖ **¬°Excelente!** Has seleccionado {total_seleccionados} alimentos en este grupo. Las prote√≠nas magras son fundamentales para tu plan.")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de navegaci√≥n
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Anterior"):
                go_to_previous_step()
        with col3:
            if st.button("Siguiente ‚û°Ô∏è"):
                advance_to_next_step()

    # GRUPO 3: FUENTES DE GRASA SALUDABLE
    elif current_step == 3:
        # Add prominent visual step indicator
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #FF9800 0%, #F57C00 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(255, 152, 0, 0.3);
            border: 3px solid #FF9800;
            animation: slideIn 0.5s ease-out;
        ">
            <h2 style="margin: 0; font-size: 1.8rem; font-weight: bold; color: white;">
                ü•ë PASO 3: FUENTES DE GRASA SALUDABLE
            </h2>
            <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9; color: white;">
                Est√°s en el paso 3 de 12 - Selecciona las grasas saludables que consumes
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add unique HTML marker for this step
        st.markdown("""
        <div id="paso3"></div>
        <script>
        // Auto-scroll to this step's marker and focus on first input for better UX
        setTimeout(function() {
            const stepElement = window.parent.document.getElementById('paso3');
            if (stepElement) {
                stepElement.scrollIntoView({behavior: 'smooth'});
                // Focus on the first multiselect dropdown in this step
                setTimeout(function() {
                    const firstMultiselect = window.parent.document.querySelector('[data-testid="stMultiSelect"] input');
                    if (firstMultiselect) {
                        firstMultiselect.focus();
                        firstMultiselect.click();
                    }
                }, 200);
            }
        }, 100);
        </script>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="content-card" style="background: linear-gradient(135deg, #F4C430 0%, #DAA520 100%); color: #1E1E1E; margin-bottom: 2rem; border: 3px solid #DAA520;">
            <h2 style="color: #1E1E1E; text-align: center; margin-bottom: 1rem;">
                ü•ë PASO 3: FUENTES DE GRASA SALUDABLE
            </h2>
        </div>
        """, unsafe_allow_html=True)
        
        # Actualizar progreso
        progress.progress(25, text="Paso 3 de 12: Fuentes de grasa saludable")
        
        # Actualizar indicador visual
        st.markdown("""
        <div style="text-align: center; margin-bottom: 1rem;">
            <div style="background: #F4C430; color: #1E1E1E; border-radius: 50%; width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; margin: 0 auto; font-weight: bold; font-size: 1.2rem;">3</div>
            <h4 style="color: #F4C430; margin-top: 0.5rem;">PASO ACTUAL</h4>
        </div>
        """, unsafe_allow_html=True)

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("""
        ### üéØ ¬øQu√© necesitamos saber?
        En este paso evaluaremos las **fuentes de grasa saludable** que consumes. 
        Estas grasas son esenciales para la absorci√≥n de vitaminas y el funcionamiento hormonal.
        
        **üí° Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.
        """)
        
        st.markdown("#### ü•ë Grasas naturales de alimentos")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        grasas_naturales = st.multiselect(
            "¬øCu√°les de estas grasas naturales consumes? (Puedes seleccionar varios)",
            ["Aguacate", "Yema de huevo", "Aceitunas (negras, verdes)", "Coco rallado natural", 
             "Coco fresco", "Leche de coco sin az√∫car", "Ninguno"],
            key="grasas_naturales",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todas las grasas naturales que consumes. Marca 'Ninguno' si no consumes ninguna de estas grasas."
        )
        
        st.markdown("#### üå∞ Frutos secos y semillas")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        frutos_secos_semillas = st.multiselect(
            "¬øCu√°les de estos frutos secos y semillas consumes? (Puedes seleccionar varios)",
            ["Almendras", "Nueces", "Nuez de la India", "Pistaches", "Cacahuates naturales (sin sal)", 
             "Semillas de ch√≠a", "Semillas de linaza", "Semillas de girasol", "Semillas de calabaza (pepitas)", "Ninguno"],
            key="frutos_secos_semillas",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Incluye todos los frutos secos y semillas que consumes. Marca 'Ninguno' si no consumes ninguno de estos."
        )
        
        st.markdown("#### üßà Mantequillas y pastas vegetales")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        mantequillas_vegetales = st.multiselect(
            "¬øCu√°les de estas mantequillas y pastas vegetales consumes? (Puedes seleccionar varios)",
            ["Mantequilla de man√≠ natural", "Mantequilla de almendra", "Tahini (pasta de ajonjol√≠)", 
             "Mantequilla de nuez de la India", "Ninguno"],
            key="mantequillas_vegetales",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todas las mantequillas vegetales que consumes. Marca 'Ninguno' si no consumes ninguna de estas."
        )

        # Resumen del paso actual
        total_seleccionados = (len(st.session_state.get('grasas_naturales', [])) + 
                              len(st.session_state.get('frutos_secos_semillas', [])) + 
                              len(st.session_state.get('mantequillas_vegetales', [])))
        if total_seleccionados > 0:
            st.success(f"‚úÖ **¬°Excelente!** Has seleccionado {total_seleccionados} fuentes de grasa saludable. Estas son clave para un plan equilibrado.")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de navegaci√≥n
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Anterior"):
                go_to_previous_step()
        with col3:
            if st.button("Siguiente ‚û°Ô∏è"):
                advance_to_next_step()

    # GRUPO 4: CARBOHIDRATOS COMPLEJOS Y CEREALES
    elif current_step == 4:
        # Add prominent visual step indicator
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #9C27B0 0%, #7B1FA2 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(156, 39, 176, 0.3);
            border: 3px solid #9C27B0;
            animation: slideIn 0.5s ease-out;
        ">
            <h2 style="margin: 0; font-size: 1.8rem; font-weight: bold; color: white;">
                üçû PASO 4: CARBOHIDRATOS COMPLEJOS Y CEREALES
            </h2>
            <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9; color: white;">
                Est√°s en el paso 4 de 12 - Selecciona los carbohidratos que consumes
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add unique HTML marker for this step
        st.markdown("""
        <div id="paso4"></div>
        <script>
        // Auto-scroll to this step's marker and focus on first input for better UX
        setTimeout(function() {
            const stepElement = window.parent.document.getElementById('paso4');
            if (stepElement) {
                stepElement.scrollIntoView({behavior: 'smooth'});
                // Focus on the first multiselect dropdown in this step
                setTimeout(function() {
                    const firstMultiselect = window.parent.document.querySelector('[data-testid="stMultiSelect"] input');
                    if (firstMultiselect) {
                        firstMultiselect.focus();
                        firstMultiselect.click();
                    }
                }, 200);
            }
        }, 100);
        </script>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="content-card" style="background: linear-gradient(135deg, #F4C430 0%, #DAA520 100%); color: #1E1E1E; margin-bottom: 2rem; border: 3px solid #DAA520;">
            <h2 style="color: #1E1E1E; text-align: center; margin-bottom: 1rem;">
                üçû PASO 4: CARBOHIDRATOS COMPLEJOS Y CEREALES
            </h2>
        </div>
        """, unsafe_allow_html=True)
        
        # Actualizar progreso
        progress.progress(33, text="Paso 4 de 12: Carbohidratos complejos y cereales")
        
        # Actualizar indicador visual
        st.markdown("""
        <div style="text-align: center; margin-bottom: 1rem;">
            <div style="background: #F4C430; color: #1E1E1E; border-radius: 50%; width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; margin: 0 auto; font-weight: bold; font-size: 1.2rem;">4</div>
            <h4 style="color: #F4C430; margin-top: 0.5rem;">PASO ACTUAL</h4>
        </div>
        """, unsafe_allow_html=True)

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("""
        ### üéØ ¬øQu√© necesitamos saber?
        En este paso evaluaremos los **carbohidratos complejos y cereales** que consumes. 
        Estos alimentos proporcionan energ√≠a sostenida y fibra importante para tu digesti√≥n.
        
        **üí° Instrucci√≥n:** Marca TODOS los alimentos que consumas con facilidad, incluso ocasionalmente.
        """)
        
        st.markdown("#### üåæ Cereales y granos integrales")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        cereales_integrales = st.multiselect(
            "¬øCu√°les de estos cereales y granos integrales consumes? (Puedes seleccionar varios)",
            ["Avena tradicional", "Avena instant√°nea sin az√∫car", "Arroz integral", "Arroz blanco", 
             "Arroz jazm√≠n", "Arroz basmati", "Trigo bulgur", "Cusc√∫s", "Quinoa", "Amaranto", 
             "Trigo inflado natural", "Cereal de ma√≠z sin az√∫car", "Cereal integral bajo en az√∫car", "Ninguno"],
            key="cereales_integrales",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Incluye todos los cereales y granos que consumes. Marca 'Ninguno' si no consumes ninguno de estos."
        )
        
        st.markdown("#### üçù Pastas")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        pastas = st.multiselect(
            "¬øCu√°les de estas pastas consumes? (Puedes seleccionar varios)",
            ["Pasta integral", "Pasta de trigo regular", "Pasta de arroz", "Pasta de quinoa", "Pasta de legumbres (lentejas, garbanzos)", "Fideos de arroz", "Fideos chinos", "Spaguetti", "Macarrones", "Lasa√±a", "Ninguno"],
            key="pastas",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Incluye todas las pastas que consumes. Marca 'Ninguno' si no consumes ninguna de estas."
        )
        
        st.markdown("#### üåΩ Tortillas y panes")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        tortillas_panes = st.multiselect(
            "¬øCu√°les de estas tortillas y panes consumes? (Puedes seleccionar varios)",
            ["Tortilla de ma√≠z", "Tortilla de nopal", "Tortilla integral", "Tortilla de harina", 
             "Tortilla de avena", "Pan integral", "Pan multigrano", "Pan de centeno", 
             "Pan de caja sin az√∫car a√±adida", "Pan pita integral", "Pan tipo Ezekiel (germinado)", "Ninguno"],
            key="tortillas_panes",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todos los tipos de tortillas y panes que consumes. Marca 'Ninguno' si no consumes ninguno."
        )
        
        st.markdown("#### ü•î Ra√≠ces y tub√©rculos (forma base)")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        raices_tuberculos = st.multiselect(
            "¬øCu√°les de estas ra√≠ces y tub√©rculos consumes? (Puedes seleccionar varios)",
            ["Papa", "Camote", "Yuca", "Pl√°tano macho", "J√≠cama", "Zanahoria", "Betabel", "Ninguno"],
            key="raices_tuberculos",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Incluye todos los tub√©rculos y ra√≠ces que consumes en su forma base. Marca 'Ninguno' si no consumes ninguno de estos."
        )
        
        st.markdown("#### ü´ò Leguminosas")
        st.info("üí° **Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.")
        leguminosas = st.multiselect(
            "¬øCu√°les de estas leguminosas consumes? (Puedes seleccionar varios)",
            ["Frijoles negros", "Frijoles bayos", "Frijoles pintos", "Lentejas", "Garbanzos", 
             "Habas cocidas", "Soya texturizada", "Edamames (vainas de soya)", "Hummus (pur√© de garbanzo)", "Ninguno"],
            key="leguminosas",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar opciones",
            help="Selecciona todas las leguminosas que consumes. Marca 'Ninguno' si no consumes ninguna de estas."
        )

        # Resumen del paso actual
        total_seleccionados = (len(st.session_state.get('cereales_integrales', [])) + 
                              len(st.session_state.get('pastas', [])) + 
                              len(st.session_state.get('tortillas_panes', [])) + 
                              len(st.session_state.get('raices_tuberculos', [])) + 
                              len(st.session_state.get('leguminosas', [])))
        if total_seleccionados > 0:
            st.success(f"‚úÖ **¬°Excelente!** Has seleccionado {total_seleccionados} fuentes de carbohidratos. Estos proporcionar√°n energ√≠a para tu plan.")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de navegaci√≥n
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Anterior"):
                go_to_previous_step()
        with col3:
            if st.button("Siguiente ‚û°Ô∏è"):
                advance_to_next_step()

    # GRUPO 5: VEGETALES
    elif current_step == 5:
        # Add prominent visual step indicator
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #4CAF50 0%, #388E3C 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);
            border: 3px solid #4CAF50;
            animation: slideIn 0.5s ease-out;
        ">
            <h2 style="margin: 0; font-size: 1.8rem; font-weight: bold; color: white;">
                ü•¨ PASO 5: VEGETALES
            </h2>
            <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9; color: white;">
                Est√°s en el paso 5 de 12 - Selecciona los vegetales que consumes
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add unique HTML marker for this step
        st.markdown("""
        <div id="paso5"></div>
        <script>
        // Auto-scroll to this step's marker and focus on first input for better UX
        setTimeout(function() {
            const stepElement = window.parent.document.getElementById('paso5');
            if (stepElement) {
                stepElement.scrollIntoView({behavior: 'smooth'});
                // Focus on the first multiselect dropdown in this step
                setTimeout(function() {
                    const firstMultiselect = window.parent.document.querySelector('[data-testid="stMultiSelect"] input');
                    if (firstMultiselect) {
                        firstMultiselect.focus();
                        firstMultiselect.click();
                    }
                }, 200);
            }
        }, 100);
        </script>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="content-card" style="background: linear-gradient(135deg, #F4C430 0%, #DAA520 100%); color: #1E1E1E; margin-bottom: 2rem; border: 3px solid #DAA520;">
            <h2 style="color: #1E1E1E; text-align: center; margin-bottom: 1rem;">
                ü•¨ PASO 5: VEGETALES
            </h2>
        </div>
        """, unsafe_allow_html=True)
        
        # Actualizar progreso
        progress.progress(42, text="Paso 5 de 12: Vegetales")
        
        # Actualizar indicador visual
        st.markdown("""
        <div style="text-align: center; margin-bottom: 1rem;">
            <div style="background: #F4C430; color: #1E1E1E; border-radius: 50%; width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; margin: 0 auto; font-weight: bold; font-size: 1.2rem;">5</div>
            <h4 style="color: #F4C430; margin-top: 0.5rem;">PASO ACTUAL</h4>
        </div>
        """, unsafe_allow_html=True)

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("""
        ### üéØ ¬øQu√© necesitamos saber?
        En este paso evaluaremos los **vegetales** que consumes o toleras f√°cilmente. 
        Los vegetales aportan vitaminas, minerales, fibra y antioxidantes esenciales para tu salud.
        
        **üí° Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.
        """)
        
        st.info("üí° **Ayuda:** Incluye vegetales que consumas crudos, cocidos, al vapor, salteados o en cualquier preparaci√≥n. Entre m√°s vegetales selecciones, m√°s variado ser√° tu plan.")
        
        vegetales_lista = st.multiselect(
            "¬øCu√°les de estos vegetales consumes o toleras f√°cilmente? (Puedes seleccionar varios)",
            ["Espinaca", "Acelga", "Kale", "Lechuga (romana, italiana, orejona, iceberg)", 
             "Col morada", "Col verde", "Repollo", "Br√≥coli", "Coliflor", "Ejote", "Chayote", 
             "Calabacita", "Nopal", "Betabel", "Zanahoria", "Jitomate saladet", "Jitomate bola", 
             "Tomate verde", "Cebolla blanca", "Cebolla morada", "Pimiento morr√≥n (rojo, verde, amarillo, naranja)", 
             "Pepino", "Apio", "R√°bano", "Ajo", "Berenjena", "Champi√±ones", "Guisantes (ch√≠charos)", 
             "Verdolaga", "Habas tiernas", "Germen de alfalfa", "Germen de soya", "Flor de calabaza", "Ninguno"],
            key="vegetales_lista",
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar todos los vegetales que consumes",
            help="Selecciona todos los vegetales que consumes o toleras. Marca 'Ninguno' si no consumes ninguno de estos vegetales."
        )

        # Resumen del paso actual con categorizaci√≥n
        vegetales_count = len(st.session_state.get('vegetales_lista', []))
        if vegetales_count >= 15:
            st.success(f"‚úÖ **¬°Excelente diversidad!** Has seleccionado {vegetales_count} vegetales. Esto permitir√° crear un plan muy variado y nutritivo.")
        elif vegetales_count >= 8:
            st.success(f"‚úÖ **¬°Buena variedad!** Has seleccionado {vegetales_count} vegetales. Tu plan tendr√° buena diversidad nutricional.")
        elif vegetales_count >= 3:
            st.info(f"‚ÑπÔ∏è **Variedad b√°sica:** Has seleccionado {vegetales_count} vegetales. Considera probar otros vegetales para enriquecer tu plan.")
        elif vegetales_count > 0:
            st.warning(f"‚ö†Ô∏è **Poca variedad:** Solo has seleccionado {vegetales_count} vegetales. Te recomendamos incluir m√°s opciones.")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de navegaci√≥n
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Anterior"):
                go_to_previous_step()
        with col3:
            if st.button("Siguiente ‚û°Ô∏è"):
                advance_to_next_step()

    # GRUPO 6: FRUTAS
    elif current_step == 6:
        # Add prominent visual step indicator
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #E91E63 0%, #C2185B 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(233, 30, 99, 0.3);
            border: 3px solid #E91E63;
            animation: slideIn 0.5s ease-out;
        ">
            <h2 style="margin: 0; font-size: 1.8rem; font-weight: bold; color: white;">
                üçé PASO 6: FRUTAS
            </h2>
            <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9; color: white;">
                Est√°s en el paso 6 de 12 - Selecciona las frutas que consumes
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add unique HTML marker for this step
        st.markdown("""
        <div id="paso6"></div>
        <script>
        // Auto-scroll to this step's marker and focus on first input for better UX
        setTimeout(function() {
            const stepElement = window.parent.document.getElementById('paso6');
            if (stepElement) {
                stepElement.scrollIntoView({behavior: 'smooth'});
                // Focus on the first multiselect dropdown in this step
                setTimeout(function() {
                    const firstMultiselect = window.parent.document.querySelector('[data-testid="stMultiSelect"] input');
                    if (firstMultiselect) {
                        firstMultiselect.focus();
                        firstMultiselect.click();
                    }
                }, 200);
            }
        }, 100);
        </script>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="content-card" style="background: linear-gradient(135deg, #F4C430 0%, #DAA520 100%); color: #1E1E1E; margin-bottom: 2rem; border: 3px solid #DAA520;">
            <h2 style="color: #1E1E1E; text-align: center; margin-bottom: 1rem;">
                üçé PASO 6: FRUTAS
            </h2>
        </div>
        """, unsafe_allow_html=True)
        
        # Actualizar progreso
        progress.progress(50, text="Paso 6 de 12: Frutas - ¬°Completando grupos principales!")
        
        # Actualizar indicador visual
        st.markdown("""
        <div style="text-align: center; margin-bottom: 1rem;">
            <div style="background: #F4C430; color: #1E1E1E; border-radius: 50%; width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; margin: 0 auto; font-weight: bold; font-size: 1.2rem;">6</div>
            <h4 style="color: #F4C430; margin-top: 0.5rem;">¬°√öLTIMO GRUPO PRINCIPAL!</h4>
        </div>
        """, unsafe_allow_html=True)

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("""
        ### üéØ ¬øQu√© necesitamos saber?
        En este √∫ltimo paso de los grupos principales evaluaremos las **frutas** que disfrutas o toleras bien. 
        Las frutas aportan vitaminas, antioxidantes, fibra y az√∫cares naturales para energ√≠a.
        
        **üí° Instrucci√≥n:** Preferentemente elige al menos uno de esta lista. Se pueden seleccionar m√°s de uno. Si no consumes ninguno, selecciona 'Ninguno'.
        """)
        
        st.info("üí° **Ayuda:** Incluye frutas que consumas solas, en licuados, ensaladas, postres naturales o cualquier preparaci√≥n. La variedad de frutas enriquecer√° tu plan nutricional.")
        
        frutas_lista = st.multiselect(
            "¬øCu√°les de estas frutas disfrutas o toleras bien? (Puedes seleccionar varios)",
            ["Manzana (roja, verde, gala, fuji)", "Naranja", "Mandarina", "Mango (petac√≥n, ataulfo)", 
             "Papaya", "Sand√≠a", "Mel√≥n", "Pi√±a", "Pl√°tano (tabasco, dominico, macho)", "Uvas", 
             "Fresas", "Ar√°ndanos", "Zarzamoras", "Frambuesas", "Higo", "Kiwi", "Pera", "Durazno", 
             "Ciruela", "Granada", "Cereza", "Chabacano", "Lima", "Lim√≥n", "Guayaba", "Tuna", 
             "N√≠spero", "Mamey", "Pitahaya (dragon fruit)", "Tamarindo", "Coco (carne, rallado)", 
             "Caqui (persim√≥n)", "Maracuy√°", "Manzana en pur√© sin az√∫car", "Fruta en alm√≠bar light", "Ninguno"],
            key='frutas_lista',
            placeholder="üîΩ Haz clic aqu√≠ para ver y seleccionar todas las frutas que disfrutas",
            help="Selecciona todas las frutas que disfrutas. Marca 'Ninguno' si no consumes ninguna de estas frutas."
        )

        # Resumen del paso actual con categorizaci√≥n
        frutas_count = len(st.session_state.get('frutas_lista', []))
        if frutas_count >= 12:
            st.success(f"üéâ **¬°Fant√°stica variedad!** Has seleccionado {frutas_count} frutas. Tu plan tendr√° una excelente diversidad de sabores y nutrientes.")
        elif frutas_count >= 6:
            st.success(f"‚úÖ **¬°Buena selecci√≥n!** Has seleccionado {frutas_count} frutas. Esto permitir√° variedad en tu plan alimentario.")
        elif frutas_count >= 3:
            st.info(f"‚ÑπÔ∏è **Selecci√≥n b√°sica:** Has seleccionado {frutas_count} frutas. Considera incluir m√°s opciones para mayor variedad.")
        elif frutas_count > 0:
            st.warning(f"‚ö†Ô∏è **Poca variedad:** Solo has seleccionado {frutas_count} frutas. Te sugerimos probar m√°s opciones.")
        
        # Mensaje de finalizaci√≥n de grupos principales
        st.markdown("""
        ---
        ### üéä ¬°Felicitaciones!
        Has completado la evaluaci√≥n de los **6 grupos alimentarios principales**. 
        A continuaci√≥n encontrar√°s secciones adicionales para complementar tu perfil nutricional.
        """)
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de navegaci√≥n
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Anterior"):
                go_to_previous_step()
        with col3:
            if st.button("Siguiente ‚û°Ô∏è"):
                advance_to_next_step()

    # APARTADO EXTRA 1: ACEITES DE COCCI√ìN (PASO 7)
    elif current_step == 7:
        # Add prominent visual step indicator
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #795548 0%, #5D4037 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(121, 85, 72, 0.3);
            border: 3px solid #795548;
            animation: slideIn 0.5s ease-out;
        ">
            <h2 style="margin: 0; font-size: 1.8rem; font-weight: bold; color: white;">
                üç≥ PASO 7: ACEITES DE COCCI√ìN PREFERIDOS
            </h2>
            <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9; color: white;">
                Est√°s en el paso 7 de 12 - Informaci√≥n Adicional (Opcional)
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add unique HTML marker for this step
        st.markdown("""
        <div id="paso7"></div>
        <script>
        // Auto-scroll to this step's marker and focus on first input for better UX
        setTimeout(function() {
            const stepElement = window.parent.document.getElementById('paso7');
            if (stepElement) {
                stepElement.scrollIntoView({behavior: 'smooth'});
                // Focus on the first multiselect dropdown in this step
                setTimeout(function() {
                    const firstMultiselect = window.parent.document.querySelector('[data-testid="stMultiSelect"] input');
                    if (firstMultiselect) {
                        firstMultiselect.focus();
                        firstMultiselect.click();
                    }
                }, 200);
            }
        }, 100);
        </script>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="content-card" style="background: linear-gradient(135deg, #27AE60 0%, #2ECC71 100%); color: #1E1E1E; margin-bottom: 2rem; border: 3px solid #27AE60;">
            <h2 style="color: #1E1E1E; text-align: center; margin-bottom: 1rem;">
                üç≥ PASO 7: ACEITES DE COCCI√ìN PREFERIDOS
            </h2>
            <p style="text-align: center; margin: 0; font-weight: bold;">Informaci√≥n Adicional - Opcional</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Actualizar progreso
        progress.progress(58, text="Paso 7 de 12: Aceites de cocci√≥n (Opcional)")
        
        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("""
        ### üéØ ¬øQu√© necesitamos saber?
        Queremos conocer los **aceites y grasas** que utilizas para cocinar, fre√≠r, hornear o saltear tus alimentos.
        Esto nos ayuda a adaptar las recetas a tus preferencias y m√©todos disponibles.
        
        **üí° Instrucci√≥n:** Selecciona TODAS las opciones que sueles usar en tu cocina. (Este paso es opcional)
        """)
        
        st.info("üí° **Ayuda:** Incluye cualquier grasa o aceite que uses para cocinar, desde aceites vegetales hasta mantequilla o manteca.")
        
        aceites_coccion = st.multiselect(
            "¬øCu√°les de estas grasas/aceites usas para cocinar? (Puedes seleccionar varios)",
            ["ü´í Aceite de oliva extra virgen", "ü•ë Aceite de aguacate", "ü•• Aceite de coco virgen", 
             "üßà Mantequilla con sal", "üßà Mantequilla sin sal", "üßà Mantequilla clarificada (ghee)", 
             "üê∑ Manteca de cerdo (casera o artesanal)", "üß¥ Spray antiadherente sin calor√≠as (aceite de oliva o aguacate)", 
             "‚ùå Prefiero cocinar sin aceite o con agua", "Ninguno"],
            key='aceites_coccion',
            placeholder="üîΩ Haz clic aqu√≠ para seleccionar los aceites que usas para cocinar",
            help="Selecciona todos los aceites y grasas que usas en tu cocina. Marca 'Ninguno' si no usas ninguno de estos aceites."
        )

        # Resumen
        aceites_count = len(st.session_state.get('aceites_coccion', []))
        if aceites_count > 0:
            st.success(f"‚úÖ **Perfecto!** Has seleccionado {aceites_count} opciones. Esto nos ayuda a personalizar las recetas seg√∫n tus m√©todos de cocci√≥n.")
        else:
            st.info("‚ÑπÔ∏è **Nota:** Si no seleccionas ning√∫n aceite, asumiremos m√©todos de cocci√≥n sin grasa a√±adida.")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de navegaci√≥n
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Anterior"):
                go_to_previous_step()
        with col3:
            if st.button("Siguiente ‚û°Ô∏è"):
                advance_to_next_step()

    # APARTADO EXTRA 2: BEBIDAS (PASO 8)
    elif current_step == 8:
        # Add prominent visual step indicator
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #00BCD4 0%, #0097A7 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(0, 188, 212, 0.3);
            border: 3px solid #00BCD4;
            animation: slideIn 0.5s ease-out;
        ">
            <h2 style="margin: 0; font-size: 1.8rem; font-weight: bold; color: white;">
                ü•§ PASO 8: BEBIDAS PARA HIDRATACI√ìN
            </h2>
            <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9; color: white;">
                Est√°s en el paso 8 de 12 - Informaci√≥n Adicional (Opcional)
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add unique HTML marker for this step
        st.markdown("""
        <div id="paso8"></div>
        <script>
        // Auto-scroll to this step's marker and focus on first input for better UX
        setTimeout(function() {
            const stepElement = window.parent.document.getElementById('paso8');
            if (stepElement) {
                stepElement.scrollIntoView({behavior: 'smooth'});
                // Focus on the first multiselect dropdown in this step
                setTimeout(function() {
                    const firstMultiselect = window.parent.document.querySelector('[data-testid="stMultiSelect"] input');
                    if (firstMultiselect) {
                        firstMultiselect.focus();
                        firstMultiselect.click();
                    }
                }, 200);
            }
        }, 100);
        </script>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="content-card" style="background: linear-gradient(135deg, #27AE60 0%, #2ECC71 100%); color: #1E1E1E; margin-bottom: 2rem; border: 3px solid #27AE60;">
            <h2 style="color: #1E1E1E; text-align: center; margin-bottom: 1rem;">
                ü•§ PASO 8: BEBIDAS PARA HIDRATACI√ìN
            </h2>
            <p style="text-align: center; margin: 0; font-weight: bold;">Informaci√≥n Adicional - Opcional</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Actualizar progreso
        progress.progress(67, text="Paso 8 de 12: Bebidas para hidrataci√≥n (Opcional)")
        
        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("""
        ### üéØ ¬øQu√© necesitamos saber?
        Queremos conocer las **bebidas sin calor√≠as** que consumes regularmente para mantenerte hidratado.
        Esto nos ayuda a incluir opciones de hidrataci√≥n que realmente disfrutes en tu plan.
        
        **üí° Instrucci√≥n:** Marca TODAS las bebidas que acostumbres tomar para hidratarte. (Este paso es opcional)
        """)
        
        st.info("üí° **Ayuda:** Incluye cualquier bebida sin calor√≠as o muy bajas en calor√≠as que tomes durante el d√≠a.")
        
        bebidas_sin_calorias = st.multiselect(
            "¬øCu√°les de estas bebidas sin calor√≠as consumes regularmente? (Puedes seleccionar varios)",
            ["üíß Agua natural", "üí¶ Agua mineral", "‚ö° Bebidas con electrolitos sin az√∫car (Electrolit Zero, SueroX, LMNT, etc.)", 
             "üçã Agua infusionada con frutas naturales (lim√≥n, pepino, menta, etc.)", 
             "üçµ T√© de hierbas sin az√∫car (manzanilla, menta, jengibre, etc.)", 
             "üçÉ T√© verde o t√© negro sin az√∫car", "‚òï Caf√© negro sin az√∫car", 
             "ü•§ Refrescos sin calor√≠as (Coca Cola Zero, Pepsi Light, etc.)", "Ninguno"],
            key='bebidas_sin_calorias',
            placeholder="üîΩ Haz clic aqu√≠ para seleccionar las bebidas que consumes",
            help="Selecciona todas las bebidas sin calor√≠as que acostumbres. Marca 'Ninguno' si no consumes ninguna de estas bebidas."
        )

        # Resumen
        bebidas_count = len(st.session_state.get('bebidas_sin_calorias', []))
        if bebidas_count > 0:
            st.success(f"‚úÖ **Excelente!** Has seleccionado {bebidas_count} opciones de hidrataci√≥n. Esto enriquece las recomendaciones de tu plan.")
        else:
            st.info("‚ÑπÔ∏è **Nota:** La hidrataci√≥n es fundamental. Te recomendamos incluir al menos agua natural en tu rutina diaria.")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de navegaci√≥n
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Anterior"):
                go_to_previous_step()
        with col3:
            if st.button("Siguiente ‚û°Ô∏è"):
                advance_to_next_step()

    # APARTADO EXTRA 3: ALERGIAS/INTOLERANCIAS (PASO 9)
    elif current_step == 9:
        # Add prominent visual step indicator
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #F44336 0%, #D32F2F 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(244, 67, 54, 0.3);
            border: 3px solid #F44336;
            animation: slideIn 0.5s ease-out;
        ">
            <h2 style="margin: 0; font-size: 1.8rem; font-weight: bold; color: white;">
                üö® PASO 9: ALERGIAS E INTOLERANCIAS
            </h2>
            <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9; color: white;">
                Est√°s en el paso 9 de 12 - Informaci√≥n Cr√≠tica para tu Seguridad
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add unique HTML marker for this step
        st.markdown("""
        <div id="paso9"></div>
        <script>
        // Auto-scroll to this step's marker and focus on first input for better UX
        setTimeout(function() {
            const stepElement = window.parent.document.getElementById('paso9');
            if (stepElement) {
                stepElement.scrollIntoView({behavior: 'smooth'});
                // Focus on the first multiselect dropdown in this step
                setTimeout(function() {
                    const firstMultiselect = window.parent.document.querySelector('[data-testid="stMultiSelect"] input');
                    if (firstMultiselect) {
                        firstMultiselect.focus();
                        firstMultiselect.click();
                    }
                }, 200);
            }
        }, 100);
        </script>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="content-card" style="background: linear-gradient(135deg, #E74C3C 0%, #C0392B 100%); color: #FFFFFF; margin-bottom: 2rem; border: 3px solid #E74C3C;">
            <h2 style="color: #FFFFFF; text-align: center; margin-bottom: 1rem;">
                üö® PASO 9: ALERGIAS E INTOLERANCIAS
            </h2>
            <p style="text-align: center; margin: 0; font-weight: bold;">Informaci√≥n Cr√≠tica para tu Seguridad</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Actualizar progreso
        progress.progress(75, text="Paso 9 de 12: Alergias e intolerancias (Cr√≠tico)")
        
        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        
        st.markdown("""
        ### ‚ö†Ô∏è Informaci√≥n Cr√≠tica para tu Seguridad Alimentaria
        Esta secci√≥n es **fundamental** para crear un plan alimentario seguro y adecuado para ti.
        Por favor, s√© muy espec√≠fico y honesto con tus respuestas.
        """)
        
        st.markdown("### ‚ùó 1. ¬øTienes alguna alergia alimentaria?")
        st.error("üö® **IMPORTANTE:** Las alergias alimentarias pueden ser graves. Marca todas las que tengas, aunque sean leves.")
        st.info("üí° **Instrucci√≥n:** Debes seleccionar al menos una opci√≥n. Si no tienes alergias, selecciona 'Ninguna'.")
        alergias_alimentarias = st.multiselect(
            "Selecciona TODAS las alergias alimentarias que tienes:",
            ["L√°cteos", "Huevo", "Frutos secos", "Mariscos", "Pescado", "Gluten", "Soya", "Semillas", "Ninguna"],
            key='alergias_alimentarias',
            placeholder="üîΩ Selecciona si tienes alguna alergia alimentaria o marca 'Ninguna'",
            help="Incluye cualquier alergia, desde leve hasta severa. Si no tienes alergias, selecciona 'Ninguna'."
        )
        
        otra_alergia = st.text_input(
            "¬øOtra alergia no mencionada? Especifica aqu√≠:",
            value=st.session_state.get('otra_alergia', ''),
            placeholder="Ej: alergia al apio, man√≠, sulfitos, etc.",
            help="Especifica cualquier otra alergia alimentaria que tengas"
        )
        
        st.markdown("---")
        st.markdown("### ‚ö†Ô∏è 2. ¬øTienes alguna intolerancia o malestar digestivo?")
        st.warning("üí° **Ayuda:** Las intolerancias causan malestar pero no son tan graves como las alergias. Incluye cualquier alimento que te cause gases, hinchaz√≥n, dolor abdominal, etc.")
        st.info("üí° **Instrucci√≥n:** Debes seleccionar al menos una opci√≥n. Si no tienes intolerancias, selecciona 'Ninguna'.")
        intolerancias_digestivas = st.multiselect(
            "Selecciona las intolerancias o malestares digestivos que experimentas:",
            ["L√°cteos con lactosa", "Leguminosas", "FODMAPs", "Gluten", "Cruc√≠feras", "Endulzantes artificiales", "Ninguna"],
            key='intolerancias_digestivas',
            placeholder="üîΩ Selecciona si tienes intolerancias digestivas o marca 'Ninguna'",
            help="Incluye alimentos que te causen malestar digestivo. Si no tienes intolerancias, selecciona 'Ninguna'."
        )
        
        otra_intolerancia = st.text_input(
            "¬øOtra intolerancia no mencionada? Especifica aqu√≠:",
            value=st.session_state.get('otra_intolerancia', ''),
            placeholder="Ej: intolerancia a la fructosa, sorbitol, etc.",
            help="Especifica cualquier otra intolerancia o malestar digestivo"
        )
        
        st.markdown("---")
        st.markdown("### ‚ûï 3. ¬øHay alg√∫n alimento o bebida especial que desees incluir?")
        st.info("üí° **Ayuda:** Menciona alimentos regionales, marcas espec√≠ficas, preparaciones especiales o cualquier cosa importante que no aparezca en las listas anteriores.")
        alimento_adicional = st.text_area(
            "Escribe aqu√≠ alimentos o bebidas adicionales:",
            value=st.session_state.get('alimento_adicional', ''),
            placeholder="Ej: agua de jamaica casera, prote√≠na en polvo marca X, alimentos regionales como quelites, etc.",
            help="Incluye cualquier alimento importante que no est√© en las listas anteriores"
        )
        
        st.markdown("---")
        st.markdown("### üë®‚Äçüç≥ 4. ¬øCu√°les son tus m√©todos de cocci√≥n m√°s accesibles?")
        st.info("üí° **Ayuda:** Selecciona los m√©todos de cocci√≥n que m√°s usas o que tienes disponibles en tu cocina. Esto nos ayuda a sugerir recetas que puedas preparar f√°cilmente.")
        
        metodos_coccion_accesibles = st.multiselect(
            "Selecciona los m√©todos de cocci√≥n que m√°s usas o prefieres:",
            ["üî• A la plancha", "üî• A la parrilla", "üíß Hervido", "‚ô®Ô∏è Al vapor", "üî• Horneado / al horno", 
             "üí® Air fryer (freidora de aire)", "‚ö° Microondas", "ü•Ñ Salteado (con poco aceite)"],
            key='metodos_coccion_accesibles',
            placeholder="üîΩ Selecciona los m√©todos de cocci√≥n que usas",
            help="Incluye todos los m√©todos que uses regularmente o que tengas disponibles"
        )
        
        otro_metodo_coccion = st.text_input(
            "¬øOtro m√©todo de cocci√≥n? Especifica aqu√≠:",
            value=st.session_state.get('otro_metodo_coccion', ''),
            placeholder="Ej: cocina de le√±a, olla de presi√≥n, wok, etc.",
            help="Especifica cualquier otro m√©todo de cocci√≥n que uses"
        )

        # Guardar en session state (solo text inputs)
        st.session_state.otra_alergia = otra_alergia
        st.session_state.otra_intolerancia = otra_intolerancia
        st.session_state.alimento_adicional = alimento_adicional
        st.session_state.otro_metodo_coccion = otro_metodo_coccion
        
        # Resumen de restricciones
        alergias_count = len(st.session_state.get('alergias_alimentarias', []))
        intolerancias_count = len(st.session_state.get('intolerancias_digestivas', []))
        total_restricciones = alergias_count + intolerancias_count
        if otra_alergia:
            total_restricciones += 1
        if otra_intolerancia:
            total_restricciones += 1
            
        if total_restricciones > 0:
            st.warning(f"‚ö†Ô∏è **Restricciones identificadas:** {total_restricciones} restricciones alimentarias. Tu plan ser√° cuidadosamente adaptado para evitar estos alimentos.")
        else:
            st.success("‚úÖ **Sin restricciones:** No has reportado alergias o intolerancias. Esto nos da mayor flexibilidad para tu plan alimentario.")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de navegaci√≥n
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Anterior"):
                go_to_previous_step()
        with col3:
            if st.button("Siguiente ‚û°Ô∏è"):
                advance_to_next_step()

    # APARTADO EXTRA 4: ANTOJOS (PASO 10)
    elif current_step == 10:
        # Add prominent visual step indicator
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #673AB7 0%, #512DA8 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(103, 58, 183, 0.3);
            border: 3px solid #673AB7;
            animation: slideIn 0.5s ease-out;
        ">
            <h2 style="margin: 0; font-size: 1.8rem; font-weight: bold; color: white;">
                üòã PASO 10: EVALUACI√ìN DE ANTOJOS
            </h2>
            <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9; color: white;">
                Est√°s en el paso 10 de 12 - Informaci√≥n para Estrategias
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add unique HTML marker for this step
        st.markdown("""
        <div id="paso10"></div>
        <script>
        // Auto-scroll to this step's marker and focus on first input for better UX
        setTimeout(function() {
            const stepElement = window.parent.document.getElementById('paso10');
            if (stepElement) {
                stepElement.scrollIntoView({behavior: 'smooth'});
                // Focus on the first multiselect dropdown in this step
                setTimeout(function() {
                    const firstMultiselect = window.parent.document.querySelector('[data-testid="stMultiSelect"] input');
                    if (firstMultiselect) {
                        firstMultiselect.focus();
                        firstMultiselect.click();
                    }
                }, 200);
            }
        }, 100);
        </script>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="content-card" style="background: linear-gradient(135deg, #9B59B6 0%, #8E44AD 100%); color: #FFFFFF; margin-bottom: 2rem; border: 3px solid #9B59B6;">
            <h2 style="color: #FFFFFF; text-align: center; margin-bottom: 1rem;">
                üòã PASO 10: EVALUACI√ìN DE ANTOJOS
            </h2>
            <p style="text-align: center; margin: 0; font-weight: bold;">¬°√öltimo Paso! - Informaci√≥n para Estrategias</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Actualizar progreso
        progress.progress(83, text="Paso 10 de 12: Antojos alimentarios")
        
        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("""
        ### üß† ¬øPor qu√© evaluamos tus antojos?
        Conocer tus **antojos frecuentes** nos ayuda a:
        - Crear estrategias para manejarlos de forma saludable
        - Incluir alternativas satisfactorias en tu plan
        - Desarrollar un plan realista y sostenible a largo plazo
        
        **üí° Instrucci√≥n:** Debes seleccionar al menos una opci√≥n en cualquiera de las categor√≠as de antojos. 
        Si no tienes antojos frecuentes, selecciona 'Ninguno' en al menos una categor√≠a.
        """)
        
        st.markdown("---")
        st.markdown("### üç´ Antojos de alimentos dulces / postres")
        st.info("üí° **Ayuda:** Incluye cualquier dulce, postre o alimento azucarado que se te antoje frecuentemente. Si no tienes antojos dulces, selecciona 'Ninguno'.")
        antojos_dulces = st.multiselect(
            "¬øCu√°les de estos alimentos dulces se te antojan frecuentemente? (Puedes seleccionar varios)",
            ["Chocolate con leche", "Chocolate amargo", "Pan dulce (conchas, donas, cuernitos)", 
             "Pastel (tres leches, chocolate, etc.)", "Galletas (Mar√≠as, Emperador, Chokis, etc.)", 
             "Helado / Nieve", "Flan / Gelatina", "Dulces tradicionales (cajeta, obleas, jamoncillo, glorias)", 
             "Cereal azucarado", "Leche condensada", "Churros", "Ninguno"],
            key='antojos_dulces',
            placeholder="üîΩ Selecciona los alimentos dulces que se te antojan o marca 'Ninguno'",
            help="Incluye todos los dulces que frecuentemente deseas. Si no tienes antojos dulces, selecciona 'Ninguno'."
        )
        
        st.markdown("---")
        st.markdown("### üßÇ Antojos de alimentos salados / snacks")
        st.info("üí° **Ayuda:** Incluye botanas, frituras o alimentos salados que se te antojen. Si no tienes antojos salados, selecciona 'Ninguno'.")
        antojos_salados = st.multiselect(
            "¬øCu√°les de estos alimentos salados se te antojan frecuentemente? (Puedes seleccionar varios)",
            ["Papas fritas (Sabritas, Ruffles, etc.)", "Cacahuates enchilados", "Frituras (Doritos, Cheetos, Takis, etc.)", 
             "Totopos con salsa", "Galletas saladas", "Cacahuates japoneses", "Chicharr√≥n (de cerdo o harina)", 
             "Nachos con queso", "Queso derretido o gratinado", "Ninguno"],
            key='antojos_salados',
            placeholder="üîΩ Selecciona los alimentos salados que se te antojan o marca 'Ninguno'",
            help="Incluye todas las botanas y snacks salados que frecuentemente deseas. Si no tienes antojos salados, selecciona 'Ninguno'."
        )
        
        st.markdown("---")
        st.markdown("### üåÆ Antojos de comidas r√°pidas / callejeras")
        st.info("üí° **Ayuda:** Incluye comida r√°pida, platillos callejeros o preparaciones que se te antojen. Si no tienes antojos de comida r√°pida, selecciona 'Ninguno'.")
        antojos_comida_rapida = st.multiselect(
            "¬øCu√°les de estas comidas r√°pidas se te antojan frecuentemente? (Puedes seleccionar varios)",
            ["Tacos (pastor, asada, birria, etc.)", "Tortas (cubana, ahogada, etc.)", "Hamburguesas", "Hot dogs", 
             "Pizza", "Quesadillas fritas", "Tamales", "Pambazos", "Sopes / gorditas", "Elotes / esquites", 
             "Burritos", "Enchiladas", "Empanadas", "Ninguno"],
            key='antojos_comida_rapida',
            placeholder="üîΩ Selecciona las comidas r√°pidas que se te antojan o marca 'Ninguno'",
            help="Incluye toda la comida r√°pida o callejera que frecuentemente deseas. Si no tienes antojos de comida r√°pida, selecciona 'Ninguno'."
        )
        
        st.markdown("---")
        st.markdown("### üçπ Antojos de bebidas y postres l√≠quidos")
        st.info("üí° **Ayuda:** Incluye bebidas azucaradas, alcoh√≥licas o postres l√≠quidos que se te antojen. Si no tienes antojos de bebidas, selecciona 'Ninguno'.")
        antojos_bebidas = st.multiselect(
            "¬øCu√°les de estas bebidas se te antojan frecuentemente? (Puedes seleccionar varios)",
            ["Refrescos regulares (Coca-Cola, Fanta, etc.)", "Jugos industrializados (Boing, Jumex, etc.)", 
             "Malteadas / Frapp√©s", "Agua de sabor con az√∫car (jamaica, horchata, tamarindo)", 
             "Caf√© con az√∫car y leche", "Champurrado / atole", "Licuado de pl√°tano con az√∫car", 
             "Bebidas alcoh√≥licas (cerveza, tequila, vino, etc.)", "Ninguno"],
            key='antojos_bebidas',
            placeholder="üîΩ Selecciona las bebidas que se te antojan o marca 'Ninguno'",
            help="Incluye todas las bebidas con calor√≠as que frecuentemente deseas. Si no tienes antojos de bebidas, selecciona 'Ninguno'."
        )
        
        st.markdown("---")
        st.markdown("### üî• Antojos de alimentos con condimentos estimulantes")
        st.info("üí° **Ayuda:** Incluye alimentos picantes, con chile o condimentos intensos que se te antojen. Si no tienes antojos picantes, selecciona 'Ninguno'.")
        antojos_picantes = st.multiselect(
            "¬øCu√°les de estos alimentos picantes se te antojan frecuentemente? (Puedes seleccionar varios)",
            ["Chiles en escabeche", "Salsas picantes", "Salsa Valentina, Taj√≠n o Chamoy", 
             "Pepinos con chile y lim√≥n", "Mangos verdes con chile", "Gomitas enchiladas", 
             "Fruta con Miguelito o chile en polvo", "Ninguno"],
            key='antojos_picantes',
            placeholder="üîΩ Selecciona los alimentos picantes que se te antojan o marca 'Ninguno'",
            help="Incluye todos los alimentos con chile o condimentos estimulantes que deseas. Si no tienes antojos picantes, selecciona 'Ninguno'."
        )
        
        st.markdown("---")
        st.markdown("### ‚ùì Otros antojos no mencionados")
        st.info("üí° **Ayuda:** Especifica cualquier otro antojo que no aparezca en las listas anteriores.")
        otros_antojos = st.text_area(
            "¬øQu√© otros alimentos o preparaciones se te antojan mucho?",
            value=st.session_state.get('otros_antojos', ''),
            placeholder="Ej: palomitas con mantequilla, raspados, gelatinas comerciales, etc.",
            help="Describe cualquier otro antojo que no est√© en las listas anteriores"
        )

        # Guardar en session state (solo text input)
        st.session_state.otros_antojos = otros_antojos
        
        # An√°lisis de antojos
        antojos_dulces_count = len(st.session_state.get('antojos_dulces', []))
        antojos_salados_count = len(st.session_state.get('antojos_salados', []))
        antojos_comida_rapida_count = len(st.session_state.get('antojos_comida_rapida', []))
        antojos_bebidas_count = len(st.session_state.get('antojos_bebidas', []))
        antojos_picantes_count = len(st.session_state.get('antojos_picantes', []))
        
        total_antojos = (antojos_dulces_count + antojos_salados_count + 
                        antojos_comida_rapida_count + antojos_bebidas_count + antojos_picantes_count)
        
        if total_antojos >= 15:
            st.warning(f"‚ö†Ô∏è **Muchos antojos identificados:** {total_antojos} tipos de antojos. Ser√° importante desarrollar estrategias espec√≠ficas de manejo.")
        elif total_antojos >= 8:
            st.info(f"‚ÑπÔ∏è **Antojos moderados:** {total_antojos} tipos de antojos. Incluiremos alternativas saludables en tu plan.")
        elif total_antojos >= 3:
            st.success(f"‚úÖ **Pocos antojos:** {total_antojos} tipos de antojos. Esto facilitar√° mantener un plan alimentario saludable.")
        elif total_antojos > 0:
            st.success(f"‚úÖ **Muy pocos antojos:** Solo {total_antojos} tipos. Tu autocontrol alimentario parece ser muy bueno.")
        else:
            st.success("üéâ **Sin antojos frecuentes:** Excelente autocontrol alimentario. Esto ser√° una gran ventaja para tu plan.")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de navegaci√≥n
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Anterior"):
                go_to_previous_step()
        with col3:
            if st.button("Siguiente ‚û°Ô∏è"):
                advance_to_next_step()

    # PASO 11: FRECUENCIA DE COMIDAS
    elif current_step == 11:
        # Add prominent visual step indicator
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #FF9800 0%, #F57C00 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(255, 152, 0, 0.3);
            border: 3px solid #FF9800;
            animation: slideIn 0.5s ease-out;
        ">
            <h2 style="margin: 0; font-size: 1.8rem; font-weight: bold; color: white;">
                üçΩÔ∏è PASO 11: FRECUENCIA DE COMIDAS PREFERIDA
            </h2>
            <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9; color: white;">
                Est√°s en el paso 11 de 12 - Adaptaci√≥n a tu Estilo de Vida
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add unique HTML marker for this step
        st.markdown("""
        <div id="paso11"></div>
        <script>
        // Auto-scroll to this step's marker and focus on first input for better UX
        setTimeout(function() {
            const stepElement = window.parent.document.getElementById('paso11');
            if (stepElement) {
                stepElement.scrollIntoView({behavior: 'smooth'});
            }
        }, 100);
        </script>
        """, unsafe_allow_html=True)
        
        # Actualizar progreso
        progress.progress(92, text="Paso 11 de 12: Frecuencia de comidas preferida")
        
        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("""
        ### üéØ ¬øCu√°l es tu frecuencia de comidas ideal?
        Queremos conocer la **frecuencia de comidas** que mejor se adapta a tu agenda diaria y estilo de vida.
        Esto nos ayudar√° a estructurar tu plan alimentario de manera que sea pr√°ctico y sostenible para ti.
        
        **üí° Instrucci√≥n:** Selecciona la opci√≥n que mejor describa tu rutina alimentaria preferida o m√°s realista para tu d√≠a a d√≠a.
        """)
        
        st.info("üí° **Ayuda:** Piensa en tu horario de trabajo, actividades y preferencias personales para elegir la frecuencia m√°s conveniente.")
        
        frecuencia_comidas = st.radio(
            "¬øCu√°l es la frecuencia de comidas que mejor se adapta a tu agenda diaria?",
            [
                "Desayuno, comida y cena (3 comidas principales)",
                "Desayuno, comida, cena y una colaci√≥n",
                "Desayuno, comida, cena y dos colaciones", 
                "Solo dos comidas principales al d√≠a",
                "Otro (especificar)"
            ],
            key='frecuencia_comidas',
            help="Selecciona la estructura de comidas que mejor se ajuste a tu rutina diaria"
        )
        
        # Campo adicional si selecciona "Otro"
        otra_frecuencia = ""
        if frecuencia_comidas == "Otro (especificar)":
            otra_frecuencia = st.text_input(
                "Especifica tu frecuencia de comidas preferida:",
                value=st.session_state.get('otra_frecuencia', ''),
                placeholder="Ej: Ayuno intermitente 16:8, una comida al d√≠a, 5 comidas peque√±as, etc.",
                help="Describe tu rutina alimentaria ideal con el mayor detalle posible"
            )
            st.session_state.otra_frecuencia = otra_frecuencia
        
        # Resumen de la selecci√≥n
        if frecuencia_comidas:
            if frecuencia_comidas == "Otro (especificar)" and otra_frecuencia:
                st.success(f"‚úÖ **Frecuencia seleccionada:** {otra_frecuencia}")
            elif frecuencia_comidas != "Otro (especificar)":
                st.success(f"‚úÖ **Frecuencia seleccionada:** {frecuencia_comidas}")
            
            # Informaci√≥n adicional seg√∫n la selecci√≥n
            if "3 comidas principales" in frecuencia_comidas:
                st.info("üçΩÔ∏è **Estructura cl√°sica:** Ideal para horarios regulares y control de porciones.")
            elif "una colaci√≥n" in frecuencia_comidas:
                st.info("ü•™ **Con una colaci√≥n:** Excelente para mantener energ√≠a estable durante el d√≠a.")
            elif "dos colaciones" in frecuencia_comidas:
                st.info("üçé **Con dos colaciones:** Perfecta para personas con horarios largos o alta actividad f√≠sica.")
            elif "dos comidas principales" in frecuencia_comidas:
                st.info("‚è∞ **Ayuno intermitente:** Ideal para quienes prefieren ventanas de alimentaci√≥n m√°s concentradas.")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de navegaci√≥n
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Anterior"):
                go_to_previous_step()
        with col3:
            if st.button("Siguiente ‚û°Ô∏è"):
                advance_to_next_step()

    # PASO 12: SUGERENCIAS DE MEN√öS
    elif current_step == 12:
        # Add prominent visual step indicator
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #4CAF50 0%, #388E3C 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);
            border: 3px solid #4CAF50;
            animation: slideIn 0.5s ease-out;
        ">
            <h2 style="margin: 0; font-size: 1.8rem; font-weight: bold; color: white;">
                üìù PASO 12: SUGERENCIAS DE MEN√öS
            </h2>
            <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9; color: white;">
                ¬°√öltimo Paso! Est√°s en el paso 12 de 12 - Personalizaci√≥n Final
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add unique HTML marker for this step
        st.markdown("""
        <div id="paso12"></div>
        <script>
        // Auto-scroll to this step's marker and focus on first input for better UX
        setTimeout(function() {
            const stepElement = window.parent.document.getElementById('paso12');
            if (stepElement) {
                stepElement.scrollIntoView({behavior: 'smooth'});
            }
        }, 100);
        </script>
        """, unsafe_allow_html=True)
        
        # Actualizar progreso
        progress.progress(100, text="Paso 12 de 12: Sugerencias de men√∫s - ¬°√öltimo paso!")
        
        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("""
        ### üí≠ Sugerencias de Men√∫s y Preferencias Adicionales
        Para finalizar tu evaluaci√≥n, nos gustar√≠a conocer si tienes **sugerencias espec√≠ficas de men√∫s** que te gustar√≠a que adaptemos a tu plan nutricional, o si prefieres que nuestro equipo de nutrici√≥n se encargue de crear las propuestas bas√°ndose en toda la informaci√≥n que has proporcionado.
        
        **üí° Instrucci√≥n:** Puedes escribir men√∫s espec√≠ficos, platos favoritos, recetas que te gustan, o simplemente indicar que conf√≠as en nuestro criterio profesional.
        """)
        
        st.info("üí° **Ayuda:** Puedes mencionar platos espec√≠ficos, combinaciones que te gustan, recetas familiares, o cualquier idea que tengas. Tambi√©n puedes dejar que nuestro equipo decida completamente.")
        
        sugerencias_menus = st.text_area(
            "¬øTienes alguna sugerencia de men√∫s que quisieras que adaptemos, o prefieres que el equipo decida por ti?",
            value=st.session_state.get('sugerencias_menus', ''),
            placeholder="""Ejemplos:
- Me gustan los desayunos con avena y frutas
- Prefiero pollo a la plancha con verduras para la cena
- Me encantan las ensaladas coloridas para el almuerzo
- Que el equipo decida completamente bas√°ndose en mi evaluaci√≥n
- Quiero incluir comida mexicana tradicional saludable
- Prefiero men√∫s sencillos y f√°ciles de preparar""",
            height=120,
            help="Escribe todas las ideas, preferencias o sugerencias que tengas, o indica si prefieres que decidamos nosotros"
        )
        
        # Guardar en session state
        st.session_state.sugerencias_menus = sugerencias_menus
        
        # Opciones predefinidas r√°pidas
        st.markdown("### üéØ Opciones R√°pidas (Opcional)")
        st.markdown("Si no sabes qu√© escribir, puedes seleccionar una de estas opciones:")
        
        opcion_rapida = st.selectbox(
            "Selecciona una opci√≥n si no tienes sugerencias espec√≠ficas:",
            [
                "Seleccionar...",
                "Que el equipo decida completamente por m√≠",
                "Prefiero comida mexicana saludable",
                "Quiero men√∫s sencillos y f√°ciles de preparar", 
                "Me gusta variar mucho los sabores",
                "Prefiero preparaciones al vapor y a la plancha",
                "Quiero incluir m√°s recetas internacionales saludables"
            ],
            key='opcion_rapida_menu',
            help="Estas son opciones generales que puedes usar si no tienes ideas espec√≠ficas"
        )
        
        # Auto-llenar si selecciona una opci√≥n r√°pida
        if opcion_rapida and opcion_rapida != "Seleccionar..." and not sugerencias_menus:
            st.session_state.sugerencias_menus = opcion_rapida
            st.rerun()
        
        # Mostrar resumen de la entrada
        if sugerencias_menus:
            palabra_count = len(sugerencias_menus.split())
            if palabra_count > 0:
                st.success(f"‚úÖ **Sugerencias recibidas:** {palabra_count} palabras. Excelente, esto nos ayudar√° mucho a personalizar tu plan.")
            
            # An√°lisis r√°pido del contenido
            if "equipo decida" in sugerencias_menus.lower() or "decidan por m√≠" in sugerencias_menus.lower():
                st.info("üë®‚Äçüç≥ **Perfecto:** Nuestro equipo de nutrici√≥n crear√° men√∫s completamente personalizados bas√°ndose en toda tu evaluaci√≥n.")
            elif len(sugerencias_menus) > 50:
                st.info("üìù **Excelente:** Has proporcionado sugerencias detalladas que nos ayudar√°n a crear un plan muy espec√≠fico para ti.")
            else:
                st.info("üí° **Recibido:** Tus preferencias han sido registradas y las consideraremos en tu plan personalizado.")
        else:
            st.info("‚ÑπÔ∏è **Nota:** Si no escribes nada, nuestro equipo crear√° men√∫s bas√°ndose en todos los alimentos que seleccionaste en los pasos anteriores.")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de navegaci√≥n - En el √∫ltimo paso solo mostrar anterior y finalizar
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Anterior"):
                go_to_previous_step()
        with col3:
            if st.button("üéâ Finalizar Evaluaci√≥n"):
                st.success("üéä ¬°Felicitaciones! Has completado toda la evaluaci√≥n de patrones alimentarios.")
                st.balloons()
                # Marcar este paso como completado
                st.session_state.step_completed[12] = True

    # RESULTADO FINAL: An√°lisis completo del nuevo cuestionario
    with st.expander("üìà **RESULTADO FINAL: Tu Perfil Alimentario Completo**", expanded=False):
        progress.progress(100, text="An√°lisis completo: Generando tu perfil alimentario personalizado")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        
        st.markdown("### üéØ Tu Perfil Alimentario Personalizado")
        
        # Crear resumen del perfil por grupos actuales
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üë§ Informaci√≥n Personal")
            st.write(f"‚Ä¢ **Nombre:** {st.session_state.get('nombre', 'No especificado')}")
            st.write(f"‚Ä¢ **Edad:** {st.session_state.get('edad', 'No especificado')} a√±os")
            st.write(f"‚Ä¢ **Sexo:** {st.session_state.get('sexo', 'No especificado')}")
            st.write(f"‚Ä¢ **Fecha evaluaci√≥n:** {st.session_state.get('fecha_llenado', 'No especificado')}")
            
            st.markdown("#### ü•© Grupo 1: Prote√≠nas Grasas")
            total_proteinas_grasas = len(st.session_state.get('huevos_embutidos', [])) + len(st.session_state.get('carnes_res_grasas', [])) + len(st.session_state.get('carnes_cerdo_grasas', [])) + len(st.session_state.get('carnes_pollo_grasas', [])) + len(st.session_state.get('organos_grasos', [])) + len(st.session_state.get('quesos_grasos', [])) + len(st.session_state.get('lacteos_enteros', [])) + len(st.session_state.get('pescados_grasos', [])) + len(st.session_state.get('mariscos_grasos', []))
            st.write(f"‚Ä¢ **Total alimentos seleccionados:** {total_proteinas_grasas}")
            if st.session_state.get('huevos_embutidos'):
                st.write(f"‚Ä¢ **Huevos/embutidos:** {len(st.session_state.get('huevos_embutidos', []))}")
            if st.session_state.get('carnes_res_grasas'):
                st.write(f"‚Ä¢ **Carnes de res grasas:** {len(st.session_state.get('carnes_res_grasas', []))}")
            if st.session_state.get('carnes_cerdo_grasas'):
                st.write(f"‚Ä¢ **Carnes de cerdo grasas:** {len(st.session_state.get('carnes_cerdo_grasas', []))}")
            if st.session_state.get('carnes_pollo_grasas'):
                st.write(f"‚Ä¢ **Carnes de pollo/pavo grasas:** {len(st.session_state.get('carnes_pollo_grasas', []))}")
            
            st.markdown("#### üçó Grupo 2: Prote√≠nas Magras")
            total_proteinas_magras = len(st.session_state.get('carnes_res_magras', [])) + len(st.session_state.get('carnes_cerdo_magras', [])) + len(st.session_state.get('carnes_pollo_magras', [])) + len(st.session_state.get('organos_magros', [])) + len(st.session_state.get('pescados_magros', [])) + len(st.session_state.get('mariscos_magros', [])) + len(st.session_state.get('quesos_magros', [])) + len(st.session_state.get('lacteos_light', [])) + len(st.session_state.get('huevos_embutidos_light', []))
            st.write(f"‚Ä¢ **Total alimentos seleccionados:** {total_proteinas_magras}")
            if st.session_state.get('carnes_res_magras'):
                st.write(f"‚Ä¢ **Carnes de res magras:** {len(st.session_state.get('carnes_res_magras', []))}")
            if st.session_state.get('pescados_magros'):
                st.write(f"‚Ä¢ **Pescados magros:** {len(st.session_state.get('pescados_magros', []))}")
        
        with col2:
            st.markdown("#### ü•ë Grupo 3: Grasas Saludables")
            total_grasas = len(st.session_state.get('grasas_naturales', [])) + len(st.session_state.get('frutos_secos_semillas', [])) + len(st.session_state.get('mantequillas_vegetales', []))
            st.write(f"‚Ä¢ **Total alimentos seleccionados:** {total_grasas}")
            if st.session_state.get('grasas_naturales'):
                st.write(f"‚Ä¢ **Grasas naturales:** {len(st.session_state.get('grasas_naturales', []))}")
            if st.session_state.get('frutos_secos_semillas'):
                st.write(f"‚Ä¢ **Frutos secos/semillas:** {len(st.session_state.get('frutos_secos_semillas', []))}")
            
            st.markdown("#### üçû Grupo 4: Carbohidratos")
            total_carbohidratos = len(st.session_state.get('cereales_integrales', [])) + len(st.session_state.get('pastas', [])) + len(st.session_state.get('tortillas_panes', [])) + len(st.session_state.get('raices_tuberculos', [])) + len(st.session_state.get('leguminosas', []))
            st.write(f"‚Ä¢ **Total alimentos seleccionados:** {total_carbohidratos}")
            if st.session_state.get('cereales_integrales'):
                st.write(f"‚Ä¢ **Cereales:** {len(st.session_state.get('cereales_integrales', []))}")
            if st.session_state.get('tortillas_panes'):
                st.write(f"‚Ä¢ **Tortillas/panes:** {len(st.session_state.get('tortillas_panes', []))}")
            
            st.markdown("#### ü•¨ Grupos 5 y 6: Vegetales y Frutas")
            st.write(f"‚Ä¢ **Vegetales:** {len(st.session_state.get('vegetales_lista', []))} seleccionados")
            st.write(f"‚Ä¢ **Frutas:** {len(st.session_state.get('frutas_lista', []))} seleccionadas")
        
        # Secci√≥n de informaci√≥n adicional
        st.markdown("### üç≥ Informaci√≥n Adicional")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üßà Aceites de Cocci√≥n")
            if st.session_state.get('aceites_coccion'):
                st.write(f"‚Ä¢ **Aceites preferidos:** {len(st.session_state.get('aceites_coccion', []))} seleccionados")
                aceites_top = st.session_state.get('aceites_coccion', [])[:3]
                for aceite in aceites_top:
                    st.write(f"  - {aceite}")
            
            st.markdown("#### ü•§ Bebidas Sin Calor√≠as")
            if st.session_state.get('bebidas_sin_calorias'):
                st.write(f"‚Ä¢ **Bebidas preferidas:** {len(st.session_state.get('bebidas_sin_calorias', []))} seleccionadas")
                bebidas_top = st.session_state.get('bebidas_sin_calorias', [])[:3]
                for bebida in bebidas_top:
                    st.write(f"  - {bebida}")
        
        with col2:
            st.markdown("#### üë®‚Äçüç≥ M√©todos de Cocci√≥n")
            if st.session_state.get('metodos_coccion_accesibles'):
                st.write(f"‚Ä¢ **M√©todos preferidos:** {len(st.session_state.get('metodos_coccion_accesibles', []))} seleccionados")
                metodos_top = st.session_state.get('metodos_coccion_accesibles', [])[:3]
                for metodo in metodos_top:
                    st.write(f"  - {metodo}")
            
            if st.session_state.get('otro_metodo_coccion'):
                st.write(f"‚Ä¢ **Otro m√©todo:** {st.session_state.get('otro_metodo_coccion', 'No especificado')}")

        # Restricciones importantes
        if st.session_state.get('alergias_alimentarias') or st.session_state.get('intolerancias_digestivas'):
            st.markdown("### ‚ö†Ô∏è Restricciones Importantes")
            if st.session_state.get('alergias_alimentarias'):
                st.warning(f"**Alergias alimentarias:** {', '.join(st.session_state.get('alergias_alimentarias', []))}")
                if st.session_state.get('otra_alergia'):
                    st.write(f"‚Ä¢ **Otra alergia:** {st.session_state.get('otra_alergia')}")
            
            if st.session_state.get('intolerancias_digestivas'):
                st.info(f"**Intolerancias digestivas:** {', '.join(st.session_state.get('intolerancias_digestivas', []))}")
                if st.session_state.get('otra_intolerancia'):
                    st.write(f"‚Ä¢ **Otra intolerancia:** {st.session_state.get('otra_intolerancia')}")

        # Antojos alimentarios
        st.markdown("### üòã Patrones de Antojos Alimentarios")
        col1, col2 = st.columns(2)
        
        with col1:
            if st.session_state.get('antojos_dulces'):
                st.write(f"‚Ä¢ **Antojos dulces:** {len(st.session_state.get('antojos_dulces', []))} tipos")
            if st.session_state.get('antojos_salados'):
                st.write(f"‚Ä¢ **Antojos salados:** {len(st.session_state.get('antojos_salados', []))} tipos")
            if st.session_state.get('antojos_comida_rapida'):
                st.write(f"‚Ä¢ **Comida r√°pida:** {len(st.session_state.get('antojos_comida_rapida', []))} tipos")
        
        with col2:
            if st.session_state.get('antojos_bebidas'):
                st.write(f"‚Ä¢ **Bebidas con calor√≠as:** {len(st.session_state.get('antojos_bebidas', []))} tipos")
            if st.session_state.get('antojos_picantes'):
                st.write(f"‚Ä¢ **Condimentos picantes:** {len(st.session_state.get('antojos_picantes', []))} tipos")
            if st.session_state.get('otros_antojos'):
                st.write(f"‚Ä¢ **Otros antojos especificados:** S√≠")

        # Informaci√≥n adicional especificada
        if st.session_state.get('alimento_adicional'):
            st.markdown("### ‚ûï Alimentos Adicionales Especificados")
            st.info(f"**Alimentos mencionados:** {st.session_state.get('alimento_adicional', 'No especificado')}")

        # Informaci√≥n de frecuencia de comidas
        if st.session_state.get('frecuencia_comidas'):
            st.markdown("### üçΩÔ∏è Frecuencia de Comidas Preferida")
            frecuencia = st.session_state.get('frecuencia_comidas', 'No especificado')
            if frecuencia == "Otro (especificar)" and st.session_state.get('otra_frecuencia'):
                st.info(f"**Frecuencia personalizada:** {st.session_state.get('otra_frecuencia')}")
            else:
                st.info(f"**Frecuencia seleccionada:** {frecuencia}")

        # Sugerencias de men√∫s
        if st.session_state.get('sugerencias_menus'):
            st.markdown("### üìù Sugerencias de Men√∫s")
            sugerencias = st.session_state.get('sugerencias_menus', '')
            palabra_count = len(sugerencias.split()) if sugerencias else 0
            st.info(f"**Sugerencias del cliente:** {sugerencias[:200]}{'...' if len(sugerencias) > 200 else ''}")
            if palabra_count > 0:
                st.success(f"**Detalle:** {palabra_count} palabras de sugerencias espec√≠ficas proporcionadas")

        # Recomendaciones personalizadas basadas en datos reales
        st.markdown("### üí° Recomendaciones Personalizadas Iniciales")
        
        # An√°lisis b√°sico basado en las respuestas actuales
        recomendaciones = []
        
        # Verificar diversidad de alimentos por grupo
        total_grupos_completos = 0
        if len(st.session_state.get('huevos_embutidos', [])) + len(st.session_state.get('carnes_res_grasas', [])) > 0:
            total_grupos_completos += 1
        if len(st.session_state.get('carnes_res_magras', [])) + len(st.session_state.get('pescados_magros', [])) > 0:
            total_grupos_completos += 1
        if len(st.session_state.get('grasas_naturales', [])) + len(st.session_state.get('frutos_secos_semillas', [])) > 0:
            total_grupos_completos += 1
        if len(st.session_state.get('cereales_integrales', [])) + len(st.session_state.get('pastas', [])) + len(st.session_state.get('tortillas_panes', [])) > 0:
            total_grupos_completos += 1
        if len(st.session_state.get('vegetales_lista', [])) > 5:
            total_grupos_completos += 1
        if len(st.session_state.get('frutas_lista', [])) > 5:
            total_grupos_completos += 1
        
        if total_grupos_completos >= 5:
            recomendaciones.append("‚úÖ **Diversidad nutricional excelente:** Tienes una buena variedad de alimentos en la mayor√≠a de grupos alimentarios.")
        elif total_grupos_completos >= 3:
            recomendaciones.append("üîÑ **Diversidad nutricional moderada:** Considera ampliar la variedad en algunos grupos alimentarios.")
        else:
            recomendaciones.append("üìà **Oportunidad de mejora:** Ampliar la variedad de alimentos puede enriquecer tu plan nutricional.")
        
        # Verificar m√©todos de cocci√≥n
        if len(st.session_state.get('metodos_coccion_accesibles', [])) >= 4:
            recomendaciones.append("üë®‚Äçüç≥ **Versatilidad culinaria:** Tienes m√∫ltiples m√©todos de cocci√≥n disponibles, ideal para variedad en preparaciones.")
        elif len(st.session_state.get('metodos_coccion_accesibles', [])) >= 2:
            recomendaciones.append("üîß **M√©todos b√°sicos:** Con tus m√©todos de cocci√≥n actuales puedes crear preparaciones nutritivas y variadas.")
        
        # Verificar restricciones
        if st.session_state.get('alergias_alimentarias') or st.session_state.get('intolerancias_digestivas'):
            recomendaciones.append("‚ö†Ô∏è **Plan especializado:** Tus restricciones alimentarias requerir√°n un plan personalizado cuidadoso.")
        
        # Verificar antojos
        total_antojos = len(st.session_state.get('antojos_dulces', [])) + len(st.session_state.get('antojos_salados', [])) + len(st.session_state.get('antojos_comida_rapida', []))
        if total_antojos > 10:
            recomendaciones.append("üß† **Manejo de antojos:** Se recomienda desarrollar estrategias espec√≠ficas para controlar los antojos identificados.")
        elif total_antojos > 5:
            recomendaciones.append("‚öñÔ∏è **Equilibrio:** Incluir alternativas saludables para satisfacer antojos ocasionales.")
        
        if not recomendaciones:
            recomendaciones.append("üìã **Perfil base establecido:** Se requiere m√°s informaci√≥n para recomendaciones espec√≠ficas.")
        
        for i, rec in enumerate(recomendaciones, 1):
            st.write(f"{i}. {rec}")

        st.success(f"""
        ### ‚úÖ An√°lisis de patrones alimentarios completado exitosamente
        
        **Tu perfil nutricional personalizado est√° listo** y incluye informaci√≥n detallada sobre:
        - 6 grupos alimentarios principales evaluados
        - M√©todos de cocci√≥n disponibles y preferidos  
        - Restricciones, alergias e intolerancias espec√≠ficas
        - Patrones de antojos alimentarios identificados
        - Aceites de cocci√≥n y bebidas sin calor√≠as preferidas
        
        **Este an√°lisis integral permitir√° crear un plan nutricional completamente adaptado** 
        a tus gustos, tolerancias y necesidades espec√≠ficas.
        
        La informaci√≥n ser√° enviada a nuestro equipo de nutrici√≥n para desarrollar tu plan personalizado.
        """)

        st.markdown('</div>', unsafe_allow_html=True)

# Construir resumen completo para email
def crear_resumen_email():
    resumen = f"""
=====================================
CUESTIONARIO DE SELECCI√ìN ALIMENTARIA PERSONALIZADA - MUPAI
=====================================
Generado: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Sistema: MUPAI v2.0 - Muscle Up Performance Assessment Intelligence

=====================================
DATOS DEL CLIENTE:
=====================================
- Nombre completo: {st.session_state.get('nombre', 'No especificado')}
- Edad: {st.session_state.get('edad', 'No especificado')} a√±os
- Sexo: {st.session_state.get('sexo', 'No especificado')}
- Tel√©fono: {st.session_state.get('telefono', 'No especificado')}
- Email: {st.session_state.get('email_cliente', 'No especificado')}
- Fecha evaluaci√≥n: {st.session_state.get('fecha_llenado', 'No especificado')}

=====================================
ü•© GRUPO 1: PROTE√çNA ANIMAL CON M√ÅS CONTENIDO GRASO
=====================================
üç≥ Huevos y embutidos:
- {', '.join(st.session_state.get('huevos_embutidos', [])) if st.session_state.get('huevos_embutidos') else 'No especificado'}

üêÑ Carnes de res grasas:
- {', '.join(st.session_state.get('carnes_res_grasas', [])) if st.session_state.get('carnes_res_grasas') else 'No especificado'}

üê∑ Carnes de cerdo grasas:
- {', '.join(st.session_state.get('carnes_cerdo_grasas', [])) if st.session_state.get('carnes_cerdo_grasas') else 'No especificado'}

üêî Carnes de pollo/pavo grasas:
- {', '.join(st.session_state.get('carnes_pollo_grasas', [])) if st.session_state.get('carnes_pollo_grasas') else 'No especificado'}

ü´Ä √ìrganos y v√≠sceras grasas:
- {', '.join(st.session_state.get('organos_grasos', [])) if st.session_state.get('organos_grasos') else 'No especificado'}

üêü Pescados grasos:
- {', '.join(st.session_state.get('pescados_grasos', [])) if st.session_state.get('pescados_grasos') else 'No especificado'}

ü¶ê Mariscos/comida marina grasos:
- {', '.join(st.session_state.get('mariscos_grasos', [])) if st.session_state.get('mariscos_grasos') else 'No especificado'}

üßÄ Quesos altos en grasa:
- {', '.join(st.session_state.get('quesos_grasos', [])) if st.session_state.get('quesos_grasos') else 'No especificado'}

ü•õ L√°cteos enteros:
- {', '.join(st.session_state.get('lacteos_enteros', [])) if st.session_state.get('lacteos_enteros') else 'No especificado'}

üêü Pescados grasos:
- {', '.join(st.session_state.get('pescados_grasos', [])) if st.session_state.get('pescados_grasos') else 'No especificado'}

=====================================
üçó GRUPO 2: PROTE√çNA ANIMAL MAGRA
=====================================
üêÑ Carnes de res magras:
- {', '.join(st.session_state.get('carnes_res_magras', [])) if st.session_state.get('carnes_res_magras') else 'No especificado'}

üê∑ Carnes de cerdo magras:
- {', '.join(st.session_state.get('carnes_cerdo_magras', [])) if st.session_state.get('carnes_cerdo_magras') else 'No especificado'}

üêî Carnes de pollo/pavo magras:
- {', '.join(st.session_state.get('carnes_pollo_magras', [])) if st.session_state.get('carnes_pollo_magras') else 'No especificado'}

ü´Ä √ìrganos y v√≠sceras magros:
- {', '.join(st.session_state.get('organos_magros', [])) if st.session_state.get('organos_magros') else 'No especificado'}

üêü Pescados magros:
- {', '.join(st.session_state.get('pescados_magros', [])) if st.session_state.get('pescados_magros') else 'No especificado'}

ü¶ê Mariscos/comida marina magros:
- {', '.join(st.session_state.get('mariscos_magros', [])) if st.session_state.get('mariscos_magros') else 'No especificado'}

üßÄ Quesos magros:
- {', '.join(st.session_state.get('quesos_magros', [])) if st.session_state.get('quesos_magros') else 'No especificado'}

ü•õ L√°cteos light o reducidos:
- {', '.join(st.session_state.get('lacteos_light', [])) if st.session_state.get('lacteos_light') else 'No especificado'}

ü•ö Huevos y embutidos light:
- {', '.join(st.session_state.get('huevos_embutidos_light', [])) if st.session_state.get('huevos_embutidos_light') else 'No especificado'}

=====================================
ü•ë GRUPO 3: FUENTES DE GRASA SALUDABLE
=====================================
ü•ë Grasas naturales de alimentos:
- {', '.join(st.session_state.get('grasas_naturales', [])) if st.session_state.get('grasas_naturales') else 'No especificado'}

üå∞ Frutos secos y semillas:
- {', '.join(st.session_state.get('frutos_secos_semillas', [])) if st.session_state.get('frutos_secos_semillas') else 'No especificado'}

üßà Mantequillas y pastas vegetales:
- {', '.join(st.session_state.get('mantequillas_vegetales', [])) if st.session_state.get('mantequillas_vegetales') else 'No especificado'}

=====================================
üçû GRUPO 4: CARBOHIDRATOS COMPLEJOS Y CEREALES
=====================================
üåæ Cereales y granos integrales:
- {', '.join(st.session_state.get('cereales_integrales', [])) if st.session_state.get('cereales_integrales') else 'No especificado'}

üçù Pastas:
- {', '.join(st.session_state.get('pastas', [])) if st.session_state.get('pastas') else 'No especificado'}

üåΩ Tortillas y panes:
- {', '.join(st.session_state.get('tortillas_panes', [])) if st.session_state.get('tortillas_panes') else 'No especificado'}

ü•î Ra√≠ces y tub√©rculos (forma base):
- {', '.join(st.session_state.get('raices_tuberculos', [])) if st.session_state.get('raices_tuberculos') else 'No especificado'}

ü´ò Leguminosas:
- {', '.join(st.session_state.get('leguminosas', [])) if st.session_state.get('leguminosas') else 'No especificado'}

=====================================
ü•¨ GRUPO 5: VEGETALES
=====================================
- {', '.join(st.session_state.get('vegetales_lista', [])) if st.session_state.get('vegetales_lista') else 'No especificado'}

=====================================
üçé GRUPO 6: FRUTAS
=====================================
- {', '.join(st.session_state.get('frutas_lista', [])) if st.session_state.get('frutas_lista') else 'No especificado'}

=====================================
üç≥ APARTADO EXTRA: GRASA/ACEITE DE COCCI√ìN FAVORITA
=====================================
- {', '.join(st.session_state.get('aceites_coccion', [])) if st.session_state.get('aceites_coccion') else 'No especificado'}

=====================================
ü•§ BEBIDAS SIN CALOR√çAS PARA HIDRATACI√ìN
=====================================
- {', '.join(st.session_state.get('bebidas_sin_calorias', [])) if st.session_state.get('bebidas_sin_calorias') else 'No especificado'}

=====================================
üö® SECCI√ìN FINAL: ALERGIAS, INTOLERANCIAS Y PREFERENCIAS
=====================================
‚ùó 1. Alergias alimentarias:
- {', '.join(st.session_state.get('alergias_alimentarias', [])) if st.session_state.get('alergias_alimentarias') else 'No especificado'}
- Otra alergia especificada: {st.session_state.get('otra_alergia', 'No especificado')}

‚ö†Ô∏è 2. Intolerancias o malestar digestivo:
- {', '.join(st.session_state.get('intolerancias_digestivas', [])) if st.session_state.get('intolerancias_digestivas') else 'No especificado'}
- Otra intolerancia especificada: {st.session_state.get('otra_intolerancia', 'No especificado')}

‚ûï 3. Alimentos o bebidas adicionales deseados:
- {st.session_state.get('alimento_adicional', 'No especificado')}

‚ûï 4. M√©todos de cocci√≥n m√°s accesibles para el d√≠a a d√≠a:
- {', '.join(st.session_state.get('metodos_coccion_accesibles', [])) if st.session_state.get('metodos_coccion_accesibles') else 'No especificado'}
- Otro m√©todo especificado: {st.session_state.get('otro_metodo_coccion', 'No especificado')}

=====================================
üòã SECCI√ìN DE ANTOJOS ALIMENTARIOS
=====================================
üç´ Alimentos dulces / postres:
- {', '.join(st.session_state.get('antojos_dulces', [])) if st.session_state.get('antojos_dulces') else 'No especificado'}

üßÇ Alimentos salados / snacks:
- {', '.join(st.session_state.get('antojos_salados', [])) if st.session_state.get('antojos_salados') else 'No especificado'}

üåÆ Comidas r√°pidas / callejeras:
- {', '.join(st.session_state.get('antojos_comida_rapida', [])) if st.session_state.get('antojos_comida_rapida') else 'No especificado'}

üçπ Bebidas y postres l√≠quidos:
- {', '.join(st.session_state.get('antojos_bebidas', [])) if st.session_state.get('antojos_bebidas') else 'No especificado'}

üî• Alimentos con condimentos estimulantes:
- {', '.join(st.session_state.get('antojos_picantes', [])) if st.session_state.get('antojos_picantes') else 'No especificado'}

‚ùì Otros antojos especificados:
- {st.session_state.get('otros_antojos', 'No especificado')}

=====================================
üçΩÔ∏è FRECUENCIA DE COMIDAS PREFERIDA
=====================================
- Frecuencia seleccionada: {st.session_state.get('frecuencia_comidas', 'No especificado')}
- Especificaci√≥n adicional: {st.session_state.get('otra_frecuencia', 'No especificado')}

=====================================
üìù SUGERENCIAS DE MEN√öS Y PREFERENCIAS
=====================================
- Sugerencias del cliente: {st.session_state.get('sugerencias_menus', 'No especificado')}
- Opci√≥n r√°pida seleccionada: {st.session_state.get('opcion_rapida_menu', 'No especificado')}

=====================================
RESUMEN DE AN√ÅLISIS IDENTIFICADO:
=====================================
Este cuestionario completo de patrones alimentarios proporciona una base integral 
para el desarrollo de recomendaciones nutricionales altamente personalizadas basadas en:

1. 6 grupos alimentarios principales evaluados
2. M√©todos de cocci√≥n disponibles y preferidos
3. Restricciones espec√≠ficas (alergias e intolerancias)  
4. Patrones de preferencias detallados
5. An√°lisis de antojos y alimentaci√≥n emocional
6. Frecuencia de comidas preferida del cliente
7. Sugerencias espec√≠ficas de men√∫s y preferencias adicionales
8. Contexto personal, familiar y social completo

RECOMENDACIONES PARA SEGUIMIENTO:
- Desarrollar plan nutricional personalizado basado en estos patrones
- Considerar restricciones y alergias como prioridad absoluta
- Aprovechar m√©todos de cocci√≥n preferidos y disponibles
- Integrar estrategias para manejo de antojos identificados
- Estructurar la frecuencia de comidas seg√∫n la preferencia del cliente
- Incorporar sugerencias espec√≠ficas de men√∫s proporcionadas por el cliente
- Adaptar recomendaciones al contexto personal y familiar espec√≠fico

=====================================
¬© 2025 MUPAI - Muscle up GYM
Alimentary Pattern Assessment Intelligence
=====================================
"""
    return resumen

# RESUMEN FINAL Y ENV√çO DE EMAIL
st.markdown("---")
st.markdown('<div class="content-card" style="background: linear-gradient(135deg, #F4C430 0%, #DAA520 100%); color: #1E1E1E;">', unsafe_allow_html=True)
st.markdown("## üéØ **Resumen Final de tu Evaluaci√≥n de Patrones Alimentarios**")
st.markdown(f"*Fecha: {st.session_state.get('fecha_llenado', 'No especificado')} | Cliente: {st.session_state.get('nombre', 'No especificado')}*")

# Mostrar m√©tricas finales basadas en los datos reales del formulario
col1, col2, col3 = st.columns(3)
with col1:
    total_alimentos_grupo1 = len(st.session_state.get('huevos_embutidos', [])) + len(st.session_state.get('carnes_res_grasas', [])) + len(st.session_state.get('quesos_grasos', []))
    total_alimentos_grupo2 = len(st.session_state.get('carnes_res_magras', [])) + len(st.session_state.get('pescados_magros', [])) + len(st.session_state.get('quesos_magros', []))
    st.markdown(f"""
    ### ü•© Prote√≠nas
    - **Grupo 1 (grasas):** {total_alimentos_grupo1} alimentos
    - **Grupo 2 (magras):** {total_alimentos_grupo2} alimentos
    - **Restricciones:** {'S√≠' if st.session_state.get('alergias_alimentarias') or st.session_state.get('intolerancias_digestivas') else 'No'}
    """)

with col2:
    total_grasas = len(st.session_state.get('grasas_naturales', [])) + len(st.session_state.get('frutos_secos_semillas', []))
    total_carbohidratos = len(st.session_state.get('cereales_integrales', [])) + len(st.session_state.get('pastas', [])) + len(st.session_state.get('tortillas_panes', []))
    st.markdown(f"""
    ### ü•ë Macronutrientes  
    - **Grasas saludables:** {total_grasas} alimentos
    - **Carbohidratos:** {total_carbohidratos} alimentos
    - **Vegetales:** {len(st.session_state.get('vegetales_lista', []))} seleccionados
    """)

with col3:
    total_antojos = len(st.session_state.get('antojos_dulces', [])) + len(st.session_state.get('antojos_salados', []))
    st.markdown(f"""
    ### üòã Patrones y H√°bitos
    - **Frutas:** {len(st.session_state.get('frutas_lista', []))} seleccionadas
    - **M√©todos cocci√≥n:** {len(st.session_state.get('metodos_coccion_accesibles', []))} disponibles
    - **Antojos:** {total_antojos} tipos identificados
    """)

st.success(f"""
### ‚úÖ Evaluaci√≥n de patrones alimentarios completada exitosamente

Tu perfil alimentario ha sido analizado considerando todos los grupos alimentarios evaluados: 
prote√≠nas (grasas y magras), grasas saludables, carbohidratos complejos, vegetales, frutas, 
m√©todos de cocci√≥n, restricciones alimentarias y patrones de antojos.

**Este an√°lisis proporciona la base para desarrollar recomendaciones nutricionales personalizadas** 
que se ajusten a tus gustos, tolerancias y necesidades espec√≠ficas.

Se recomienda consulta con nutricionista especializado para desarrollar plan espec√≠fico basado en estos patrones.
""")

st.markdown('</div>', unsafe_allow_html=True)

# Funci√≥n para verificar datos completos
def datos_completos_para_email():
    obligatorios = {
        "Nombre": st.session_state.get('nombre'),
        "Email": st.session_state.get('email_cliente'), 
        "Tel√©fono": st.session_state.get('telefono'),
        "Edad": st.session_state.get('edad')
    }
    faltantes = [campo for campo, valor in obligatorios.items() if not valor]
    return faltantes

def verificar_grupos_obligatorios_completos():
    """Verifica que los grupos obligatorios (1-6) est√©n completados"""
    grupos_incompletos = []
    
    # Grupo 1: Prote√≠nas grasas
    if not validate_step_1():
        grupos_incompletos.append("Prote√≠nas con m√°s contenido graso")
    
    # Grupo 2: Prote√≠nas magras  
    if not validate_step_2():
        grupos_incompletos.append("Prote√≠nas magras")
        
    # Grupo 3: Grasas saludables
    if not validate_step_3():
        grupos_incompletos.append("Fuentes de grasa saludable")
        
    # Grupo 4: Carbohidratos
    if not validate_step_4():
        grupos_incompletos.append("Carbohidratos complejos")
        
    # Grupo 5: Vegetales
    if not validate_step_5():
        grupos_incompletos.append("Vegetales")
        
    # Grupo 6: Frutas
    if not validate_step_6():
        grupos_incompletos.append("Frutas")
        
    return grupos_incompletos

# Bot√≥n para enviar email
if not st.session_state.get("correo_enviado", False):
    if st.button("üìß Terminar cuestionario y enviar resumen por email", key="enviar_email"):
        faltantes = datos_completos_para_email()
        grupos_incompletos = verificar_grupos_obligatorios_completos()
        
        if faltantes:
            st.error(f"‚ùå No se puede enviar el email. Faltan datos personales: {', '.join(faltantes)}")
        elif grupos_incompletos:
            st.error(f"""
            ‚ùå **No se puede enviar el email. Grupos incompletos:**
            
            Los siguientes grupos alimentarios requieren al menos una selecci√≥n (puedes marcar 'Ninguno' si no consumes ninguno):
            
            {chr(10).join([f'‚Ä¢ {grupo}' for grupo in grupos_incompletos])}
            
            Por favor, completa estos grupos antes de enviar el resumen.
            """)
        else:
            with st.spinner("üìß Enviando resumen de patrones alimentarios por email..."):
                resumen_completo = crear_resumen_email()
                ok = enviar_email_resumen(
                    resumen_completo, 
                    st.session_state.get('nombre', ''), 
                    st.session_state.get('email_cliente', ''), 
                    st.session_state.get('fecha_llenado', ''), 
                    st.session_state.get('edad', ''), 
                    st.session_state.get('telefono', '')
                )
                if ok:
                    st.session_state["correo_enviado"] = True
                    st.success("‚úÖ Email enviado exitosamente a administraci√≥n")
                else:
                    st.error("‚ùå Error al enviar email. Contacta a soporte t√©cnico.")
else:
    st.info("‚úÖ El resumen ya fue enviado por email. Si requieres reenviarlo, usa el bot√≥n de 'Reenviar Email'.")

# Opci√≥n para reenviar manualmente
if st.button("üìß Reenviar Email", key="reenviar_email"):
    faltantes = datos_completos_para_email()
    grupos_incompletos = verificar_grupos_obligatorios_completos()
    
    if faltantes:
        st.error(f"‚ùå No se puede reenviar el email. Faltan datos personales: {', '.join(faltantes)}")
    elif grupos_incompletos:
        st.error(f"""
        ‚ùå **No se puede reenviar el email. Grupos incompletos:**
        
        Los siguientes grupos alimentarios requieren al menos una selecci√≥n:
        
        {chr(10).join([f'‚Ä¢ {grupo}' for grupo in grupos_incompletos])}
        """)
    else:
        with st.spinner("üìß Reenviando resumen por email..."):
            resumen_completo = crear_resumen_email()
            ok = enviar_email_resumen(
                resumen_completo, 
                st.session_state.get('nombre', ''), 
                st.session_state.get('email_cliente', ''), 
                st.session_state.get('fecha_llenado', ''), 
                st.session_state.get('edad', ''), 
                st.session_state.get('telefono', '')
            )
            if ok:
                st.session_state["correo_enviado"] = True
                st.success("‚úÖ Email reenviado exitosamente a administraci√≥n")
            else:
                st.error("‚ùå Error al reenviar email. Contacta a soporte t√©cnico.")

# Limpieza de sesi√≥n y bot√≥n de nueva evaluaci√≥n
if st.button("üîÑ Nueva Evaluaci√≥n", key="nueva"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# Footer moderno
st.markdown("""
<div class="footer-mupai">
    <h4>MUPAI / Muscle up GYM Alimentary Pattern Assessment Intelligence</h4>
    <span>Digital Nutrition Science</span>
    <br>
    <span>¬© 2025 MUPAI - Muscle up GYM / MUPAI</span>
    <br>
    <a href="https://muscleupgym.fitness" target="_blank">muscleupgym.fitness</a>
</div>
""", unsafe_allow_html=True)
